//------------------------------------------------------34-03.cpp
//---- Поиск слова с максимальной характеристикой
// "грязная программа" - пословная обработка
 void find0(char in[]){
 int i=0;
 while (in[i]!=0) {				// Цикл пословного просмотра строки
	 while (in[i]==' ') i++;	// Пропуск пробелов перед словом
	 if (in[i]==0) return;
								// Начало очередного слова - i
	 for (;in[i]!=' ' && in[i]!=0; i++); 
	 }}
//---- Поиск слова максимальной длины пословная обработка
 int find1(char in[]){
 int i=0, k, m, b;
 b=-1; m=0;
 while (in[i]!=0) {				// Цикл пословного просмотра строки
	while (in[i]==' ') i++;     // Пропуск пробелов перед словом
	if (in[i]==0) return b;
	for (k=0;in[i]!=' ' && in[i]!=0; i++,k++); // Подсчет длины слова
	if (b==-1 || k<m){			// Контекст выбора максимума
		m=k; b=i-k; }           // Одновременно запоминается
	}                           // индекс начала
 return b; }
#define CMP(i) (c[i]==0 || c[i]==' ')
 //---- Сравнение слов в строке
 int my_cmp(char c[], int i1, int i2){
 while(1){						// Вечный цикл с определением 
	if (CMP(i1) && CMP(i2))		// первого расхождения
		return 0;				// Кончились одновременно - равны
	if (CMP(i1)) return -1;
	if (CMP(i2)) return 1;
	if (c[i1]!=c[i2]) return c[i1]-c[i2];
	i1++; i2++;
	}
 }
 //---- Поиск слова минимального по алфавиту
 int find2(char in[]){
 int i=0, k, m, b;
 b=-1; m=0;
 while (in[i]!=0) {				// Цикл пословного просмотра строки
	while (in[i]==' ') i++;		// Пропуск пробелов перед словом
	if (in[i]==0) return b;
	if (b==-1 || my_cmp(in,i,b)<0)
		b=i;					// Начало очередного слова
								// i - очередной, b - оптимальное
	for (k=0;in[i]!=' ' && in[i]!=0; i++); 
	}                             
 return b; }
///---- Сортировка слов в строке в порядке убывания (выбором)
 void sort(char in[], char out[]){
 int i=0,k;
 while((k=find1(in))!=-1) {		// Получить индекс очередного слова
	for (; in[k]!=' ' && in[k]!=0; i++,k++) {
		out[i]=in[k]; in[k]=' ';// Переписать с затиранием
		}
	out[i++]=' ';               // После слова добавить пробел
	}
 out[i]=0;}
 #include <stdio.h>
 void main(){
 char xx[]="this a string of sorted words",cc[80]; sort(xx,cc);
 puts(cc);
 }
