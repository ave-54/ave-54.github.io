//-------------------------------------------46-03.cpp
void sort(int A[], int n){
	int *B=new int[n];
	int i1,i2,j,s,k;
	for (s=1;s<n;s*=2){			
		for(k=0; k<n; k+=2*s){		
			for(i1=k,i2=k+s,j=k; j<n && j<k+2*s;j++)
									
				if (i2>=n || i2==k+2*s || i1!=k+s && A[i1]<A[i2])
					B[j]=A[i1++];
				else
					B[j]=A[i2++];
			}
		for (j=0;j<n;j++) A[j]=B[j];
		}
	delete B;
	}					


//------------------------------------------------------46-07.cpp

 void sort(int in[], int n){ 
    for ( int i=1; i < n; i++) {		
		int v=in[i];						
		for (int k=0; k<i; k++)				
			if(in[k]>v) break;			
		for(int j=i-1; j>=k; j--)			 
			in[j+1]=in[j];					
		in[k]=v;								
      }}                           

//------------------------------------------------------46-08.cpp

 void sort(int in[],int n) {
	for ( int i=1; i<n; i++)	
		for ( int k=i; k !=0 && in[k] < in[k-1]; k--){
			int c=in[k]; in[k]=in[k-1]; in[k-1]=c;
		}
	} 
//------------------------------------------------------46-09.cpp
//------ Сортировка Шелла с шагом по степеням 2
void shell(int A[], int n ){
	for (int m=1; m<n; m*=2);	
	for (m/=2; m!=0; m/=2)          
	for (int k=0; k<m; k++)       
	for (int i=k+m; i<n; i+=m)		
	for (int j=i; j>=m && A[j]<A[j-m]; j-=m){
		int cc = A[j]; A[j]=A[j-m]; A[j-m]=cc;
		}
	}

//-------------------------------------------46-10.cpp
void sort(int A[], int n){
	int i,j,h;
	for (h=1; h<n/9; h=h*3+1);			
	for (;h>0;h=h/3)					
	for (i=h;i<n;i++)
	for (j=i;j>=h && A[j]<A[j-h];j-=h)
		{ int c=A[j]; A[j]=A[j-h]; A[j-h]=c; }
	}					

//------------------------------------------------------46-11.cpp

 void sort(int A[], int n){
 int i,found;				
      do {                             
      found =0;
      for (i=0; i<n-1; i++)
                if (A[i] > A[i+1]) {   
           int cc = A[i]; A[i]=A[i+1]; A[i+1]=cc;
           found++;                     
           }
      } while(found !=0); }            


//------------------------------------------------------46-12.cpp
 void sort(int A[], int n){
 int i,b,b1;						
      for (b=n-1; b!=0; b=b1) {	
      b1=0;                         
      for (i=0; i<b; i++)         
           if (A[i] > A[i+1]) {	
           int cc = A[i]; A[i]=A[i+1]; A[i+1]=cc;
           b1=i; 
           }}}

//------------------------------------------------------------------46-13.cpp

void shake(int A[],int n){
int z=1,a=0,b=n-1,i,last=0;			
for (i=0;a<b;){
	if (A[i]>A[i+1]){				
		int c=A[i];A[i]=A[i+1];A[i+1]=c;
		last=i;
		}
	i+=z;							
	if (i==b || i<a) {				
		if (z>0) i=b=last;			
			else i=a=last+1;		
		z=-z;					
		}}}

//-------------------------------------------------46-14.cpp
void sort(int in[],int n){ 
	int i,j,cnt;
	int *out=new int[n];					
	for (i=0; i<n; i++){
		for ( cnt=0,j=0; j<n; j++)		
           if (in[j] < in[i]) cnt++;		
      else								
           if (in[j]==in[i] && j<i) cnt++;	
      out[cnt]=in[i];						
      } 
	for (i=0; i<n; i++) in[i]=out[i];		
	delete []out;
}

//------------------------------------------------------46-15.cpp
//------- Простое однократное слияние
#include <math.h>
#include <stdio.h>
void sort(int a[], int n);		// любая сортировка одномерного массива

void big_sort(int A[], int N){
int max=A[0],i,j,n=sqrt(N)+1;
int **B=new int*[n];
	for (i=0; i<n; i++) B[i]=new int[n];
	for (i=0; i<N; i++) {
		B[i/n][i%n]=A[i];
		if (A[i]>max) max=A[i];			
		}
	for (j=n*n-N; j<n;j++)				
		B[n-1][j]=max+1;
	for (i=0; i<n; i++) sort(B[i],n);
	for (i=0; i<N; i++){              
	for ( int k=0, j=0; j<n; j++)		
		if (B[j][0] < B[k][0]) k=j;   
	A[i] = B[k][0];                
	for (j=1; j<n; j++) 
		B[k][j-1]=B[k][j];				
	B[k][n-1]=max+1;            
	}
for (i=0; i<n; i++) delete []B[i];
delete []B;
}


//------------------------------------------------------46-16.cpp
void sort(int A[], int n){
int i,i1,i2,s,k;
for (s=1; 1; s*=2){						
	int nn=n/s;
	if (n%s!=0) nn++;					
	int n1=nn/2*s;					
	int n2=n-n1;
	if (n1<=0 || n2<=0) return;
	int *B1=new int[n1],*B2=new int[n2];
    for (i=0; i<n1; i++) B1[i]=A[i];
	for (i=0; i<n2; i++) B2[i]=A[i+n1]; 
    i1=i2=0;
	for (i=0,k=0; i<n; i++){			
		if (i1==s && i2==s)				
			k+=s,i1=0,i2=0;           
		if (i1==s || k+i1==n1) A[i]=B2[k+i2++];
		else						
		if (i2==s || k+i2==n2) A[i]=B1[k+i1++];
		else                      
		if (B1[k+i1 ] < B2[k+i2 ]) A[i]=B1[k+i1++];
		else A[i]=B2[k+i2++];
        }
	delete []B1; delete []B2; 
	}}


//-------------------------------------------46-01.cpp
void sort(int in[], int out[], int n){
	int i,j,k,max;
	for (max=in[0],i=0;i<n;i++)
		if (in[i]>max) max=in[i];
	int *cnt=new int[max+1];
	for(i=0;i<=max;i++) cnt[i]=0;
	for(i=0;i<n;i++) cnt[in[i]]++;	
	for(j=0,i=0;i<=max;i++)
		while(cnt[i]--!=0)			
			out[j++]=i;				
	}							

//------------------------------------------------------46-05.cpp
 void sort(int in[], int n){ 
    for ( int i=0; i < n-1; i++){			
	  for ( int j=i+1, k=i; j<n; j++)		
		if (in[j] < in[k]) k=j;         
	  int c=in[k]; in[k] = in[i]; in[i] = c;
	  }}                             
//---------------------------------------------------------72-05.cpp
list *sort(list *p){
list *out,*p1,*p2,*q;
if (p==NULL || p->next==NULL)	
return p;					
p1=p2=p;														
while (p2->next!=NULL && p2->next->next!=NULL)
	{
	p1=p1->next; 				
	p2=p2->next;
	p2=p2->next;
	}
q=p1->next;						
p1->next=NULL;
p=sort(p);               	
q=sort(q);
list OUT;						
p1=&OUT;						
while(p!=NULL || q!=NULL)		
	{						
	if (q==NULL || p!=NULL && p->val < q->val)
   		p1->next=p,				
		p1=p1->next,			
		p=p->next;
	else
   		p1->next=q,				
		p1=p1->next,			
		q=q->next;
	}
return OUT.next;}
//------------------------------------------------------72-02.cpp
 void sort(int in[], int a, int b){
 int i,j,mode;
 if (a>=b) return;                           
 for (i=a, j=b, mode=1; i < j; mode >0 ? j-- : i++)
		   if (in[i] > in[j]){           
	  int c = in[i]; in[i] = in[j]; in[j]=c;
	  mode = -mode;                
	  }
 sort(in,a,i-1); sort(in,i+1,b);}

//---------------------------------------------------------72-03.cpp
list *sort(list *p){
list *m,*p1,*p2,*q;
if (p==NULL || p->next==NULL)
return p;					
m=p; p=p->next;				
p1=p2=NULL;				
while(p!=NULL){
   q=p; p=p->next;		
   if (q->val < m->val)
		q->next=p1, p1=q;	
   else
   		q->next=p2, p2=q;	
	}
p1=sort(p1);			
p2=sort(p2);
m->next=p2;					
if (p1==NULL) return m;		
for (q=p1;q->next!=NULL; q=q->next);
q->next = m;             
return p1;               
}                       
void main(){ list *ph=create(50);
show(ph); ph=sort(ph); show(ph);
}
//---------------------------------------------------------72-04.cpp
void sort(int A[], int a, int b){
if (a>=b) return;			
int m=(a+b+1)/2,i,j,k;		
sort(A,a,m-1);				
sort(A,m,b);
int *tmp=new int[b-a+1];		
for (i=a,j=m,k=0; k<=b-a; k++)
	if (i==m || j!=b+1 && A[j]<A[i])
   		tmp[k]=A[j++];			
	else					
		tmp[k]=A[i++];		
for (i=a,j=0; i<=b; i++,j++) 
	A[i]=tmp[j];				
delete tmp;	}				


//------------------------------------------------------72-01.cpp
 void sort(int in[], int a, int b){
 int i,j,mode;
 double sr=0;
 if (a>=b) return;					
 for (i=a; i<=b; i++) sr+=in[i];
 sr=sr/(b-a+1);
 for (i=a, j=b; i <= j;)
	{
	if (in[i]< sr) { i++; continue; }	
	if (in[j]>=sr) { j--; continue; }	/
	int c = in[i]; in[i] = in[j]; in[j]=c;
	i++,j--;						
	}
 if (i==a) return;					
 sort(in,a,j); sort(in,i,b);}			

//----------------------------------------------77-08
void sort(int A[], int n){
	int i,j,max;
	for (i=0,max=0; i<n; i++) if (A[i]>max) max=A[i];
	int *cnt=new int[max+2];			
	int *out=new int[n];				
	for (i=0; i<=max+1; i++) cnt[i]=0;
	// вариант 1 -------------------------------------------------------
	//for (i=0; i<n; i++) cnt[A[i]]++;	
	//for (i=0,j=0; i<=max; i++)	
	//	while(cnt[i]--!=0) out[j++]=i;	
	// вариант 2 -------------------------------------------------------
	for (i=0; i<n; i++) cnt[A[i]+1]++;	
	for (i=1; i<=max;i++)				
		cnt[i]+=cnt[i-1];			
	for (i=0;i<n;i++)					
		out[cnt[A[i]]++]=A[i];			
	//------------------------------------------------------------------
	for (i=0; i<n; i++) A[i]=out[i];
	delete cnt;
	delete out;
	}

//----------------------------------------------77-07
// Лексикографическая сортировка списка
int dig_len(int dig,int k){
	int i;
	for( i=0;(dig/=k)!=0;i++);
	return i+1;}
int get_dig(int v,int num,int k){
	while(num--!=0) v/=k;
	return v%k;}
int cnt=0;
struct elem {
	int v;
	elem *next;
	elem(int v0){ v=v0; next=NULL; }
	};
struct queue {
	elem *fst,*lst;
	queue(){ fst=lst=NULL; }
	};

void sort(queue &Q, int sz){
		cnt=0;
		elem *q;
		int max_len=0,l;
		queue *A=new queue[sz];					// Очереди - карманы по значениям цифр
		for (q=Q.fst;q!=NULL;q=q->next)
			if ((l=dig_len(q->v,sz))>max_len) max_len=l;
		printf("max_len=%d\n",max_len);
		for(int raz=0;raz < max_len; raz++){				// По всем цифрам, начиная с младшей
			while(Q.fst!=NULL){				
				q=Q.fst; Q.fst=q->next;		
				if (Q.fst==NULL) Q.lst=NULL;	
				int m=get_dig(q->v,raz,sz);
				q->next=NULL;
				if (A[m].fst==NULL) A[m].fst=A[m].lst=q;
				else { A[m].lst->next=q; A[m].lst=q;} 
				cnt++;
				}
			for (int i=0;i<sz;i++){					
				if (A[i].fst==NULL) continue;
				if (Q.fst==NULL){			
					Q.fst=A[i].fst;				
					Q.lst=A[i].lst;}
				else{
					Q.lst->next=A[i].fst;		
					Q.lst=A[i].lst; }
				A[i].fst=A[i].lst=NULL;			
				}}}


//----------------------------------------------77-06
// Лексикографическая сортировка массива
// Разряд - десятичная цифра 
// Определение кол-ва цифр в чиcле
int dig_len(int dig,int k){
	int i;
	for( i=0;(dig/=k)!=0;i++);
	return i+1;}
// Выделение цифры на позиции num
int get_dig(int v,int num,int k){
	while(num--!=0) v/=k;
	return v%k;}

int cnt=0;
void sort(int A[], int n, int k){	
for (int i=0,max_len=0;i<n;i++){
	int l=dig_len(A[i],k);
	if (l>max_len) max_len=l;
	}
int **B=new int*[k],*I=new int[k];	
for (i=0;i<k; i++) B[i]=new int[n];	
for(int raz=0;raz < max_len; raz++)
	{
	int i,j,m;
	for (m=0,i=0;i<k;i++) I[i]=0;	
	for(i=0;i<n;i++)
		{
		cnt++;
		int v=get_dig(A[i],raz,k);	
		B[v][I[v]++]=A[i];		
		}
	for (i=0;i<k;i++)
		{
		printf("\n[%d] ",i);
		for (j=0;j<I[i];j++,cnt++,m++) {
			A[m]=B[i][j];			
			printf("%d ",A[m]);
			}
		}
	}
}
