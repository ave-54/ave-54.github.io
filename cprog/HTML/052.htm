<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=Edit-Time-Data href="052.files/editdata.mso">
<title>5.2. Указатели и ссылки</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="State"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="place"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>www.PHILka.RU</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>vtpc112</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>262</o:TotalTime>
  <o:Created>2008-07-25T10:28:00Z</o:Created>
  <o:LastSaved>2008-07-25T10:28:00Z</o:LastSaved>
  <o:Pages>12</o:Pages>
  <o:Words>6730</o:Words>
  <o:Characters>38362</o:Characters>
  <o:Company>NSTU_VT</o:Company>
  <o:Bytes>11776</o:Bytes>
  <o:Lines>319</o:Lines>
  <o:Paragraphs>90</o:Paragraphs>
  <o:CharactersWithSpaces>45002</o:CharactersWithSpaces>
  <o:Version>11.6360</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DoNotHyphenateCaps/>
  <w:DrawingGridHorizontalSpacing>0,55 пт</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>0,55 пт</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DrawingGridVerticalOrigin>99,25 пт</w:DrawingGridVerticalOrigin>
  <w:Compatibility>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
   <w:UseWord97LineBreakingRules/>
   <w:SelectEntireFieldWithStartOrEnd/>
   <w:UseWord2002TableStyleRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:"Times New Roman CYR";
	panose-1:2 2 6 3 5 4 5 2 3 4;
	mso-font-charset:204;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
@font-face
	{font-family:"Arial CYR";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:204;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
h1
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:14.0pt;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h3
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	font-weight:normal;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
p.a, li.a, div.a
	{mso-style-name:текст;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.0pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a0, li.a0, div.a0
	{mso-style-name:программа;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a1, li.a1, div.a1
	{mso-style-name:список;
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:18.45pt;
	margin-bottom:0cm;
	margin-left:64.35pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-18.0pt;
	mso-pagination:widow-orphan;
	mso-list:l2 level1 lfo1;
	tab-stops:42.55pt list 64.35pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a2, li.a2, div.a2
	{mso-style-name:определение;
	mso-style-parent:текст;
	margin-top:12.0pt;
	margin-right:32.9pt;
	margin-bottom:12.0pt;
	margin-left:35.45pt;
	text-align:justify;
	text-indent:.55pt;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-alt:solid windowtext 1.5pt;
	padding:0cm;
	mso-padding-alt:1.0pt 1.0pt 1.0pt 1.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a3, li.a3, div.a3
	{mso-style-name:эпиграф;
	margin-top:0cm;
	margin-right:32.9pt;
	margin-bottom:0cm;
	margin-left:5.0cm;
	margin-bottom:.0001pt;
	text-align:right;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-style:italic;
	mso-bidi-font-style:normal;}
p.a4, li.a4, div.a4
	{mso-style-name:"от края";
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a5, li.a5, div.a5
	{mso-style-name:Формула;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	layout-grid-mode:line;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.a6, li.a6, div.a6
	{mso-style-name:"без формата";
	mso-style-parent:программа;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a7, li.a7, div.a7
	{mso-style-name:стихи;
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.0pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.1, li.1, div.1
	{mso-style-name:эпиграф1;
	mso-style-parent:эпиграф;
	margin-top:0cm;
	margin-right:9.35pt;
	margin-bottom:0cm;
	margin-left:9.0cm;
	margin-bottom:.0001pt;
	text-align:right;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-style:italic;
	mso-bidi-font-style:normal;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("052.files/header.htm") fs;
	mso-footnote-continuation-separator:url("052.files/header.htm") fcs;
	mso-endnote-separator:url("052.files/header.htm") es;
	mso-endnote-continuation-separator:url("052.files/header.htm") ecs;}
@page Section1
	{size:21.0cm 842.0pt;
	margin:33.45pt 42.55pt 72.0pt 89.85pt;
	mso-header-margin:14.2pt;
	mso-footer-margin:31.75pt;
	mso-even-header:url("052.files/header.htm") eh1;
	mso-header:url("052.files/header.htm") h1;
	mso-even-footer:url("052.files/header.htm") ef1;
	mso-footer:url("052.files/header.htm") f1;
	mso-first-header:url("052.files/header.htm") fh1;
	mso-first-footer:url("052.files/header.htm") ff1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:698043920;
	mso-list-type:simple;
	mso-list-template-ids:529690064;}
@list l0:level1
	{mso-level-start-at:2;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;
	font-family:"Times New Roman";}
@list l1
	{mso-list-id:1344893096;
	mso-list-type:hybrid;
	mso-list-template-ids:1062910458 68747279 68747267 68747269 68747265 68747267 68747269 68747265 68747267 68747269;}
@list l1:level1
	{mso-level-tab-stop:64.35pt;
	mso-level-number-position:left;
	margin-left:64.35pt;
	text-indent:-18.0pt;}
@list l2
	{mso-list-id:1628194852;
	mso-list-type:hybrid;
	mso-list-template-ids:2117791172 -1450833310 68747265 68747269 68747265 68747267 68747269 68747265 68747267 68747269;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-style-link:список;
	mso-level-text:\F0B7;
	mso-level-tab-stop:64.35pt;
	mso-level-number-position:left;
	margin-left:64.35pt;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l2:level2
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:100.35pt;
	mso-level-number-position:left;
	margin-left:100.35pt;
	text-indent:-18.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Обычная таблица";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Сетка таблицы";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
  <o:regrouptable v:ext="edit">
   <o:entry new="1" old="0"/>
   <o:entry new="2" old="1"/>
   <o:entry new="3" old="0"/>
   <o:entry new="4" old="0"/>
   <o:entry new="5" old="0"/>
  </o:regrouptable>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=RU style='tab-interval:36.0pt' background="back.gif">

<div class=Section1>

<h2>5.2. Указатели и ссылки</h2>

<h3>Объект, указатель и ссылка</h3>

<p class=a>Указатели совместно с адресной арифметикой<b style='mso-bidi-font-weight:
normal'><a name="m1"> </b>играют в Си особую роль. Можно сказать, что они определяют лицо
языка. Благодаря им Си может считаться одновременно языком высокого и низкого
уровня по отношению к памяти.</p>

<p class=a>Если говорить о<span style='mso-spacerun:yes'>  </span>понятиях
указатель, ссылка, объект, то они встречаются не только в языках
программирования, но в широком смысле в информационных технологиях. Когда речь
идет о доступе к информационным ресурсам, то существуют различные варианты доступа
к ним:<span lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><b style='mso-bidi-font-weight:normal'><a name="m2">копия
(значение, объект) – </b>пользователь получает точную копию информационного
ресурса в момент доступа к ней (например, копию файла, таблицы базы данных и
т.п.). Он может как ему угодно изменять его содержимое, что не отражается на
оригинале;<b style='mso-bidi-font-weight:normal'><a name="m3"><o:p></o:p></b></p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><b style='mso-bidi-font-weight:normal'><a name="m4">указатель
– </b><span style='mso-spacerun:yes'> </span>адресная информация о расположении
информационного ресурса, через которую пользователь может обратиться к нему.
При изменении содержимого объекта через указатель на него всегда возникает
проблема <b style='mso-bidi-font-weight:normal'><a name="m5">синхронизации (разделения) </b>ресурса
между несколькими пользователями, имеющими адресную информацию о нем. Синонимом
указателя в информационных технологиях является <b style='mso-bidi-font-weight:
normal'><a name="m6">ссылка. </b>Иногда она имеет все внешние признаки объекта, например,
ярлык файла на рабочем столе, который внешне выглядит как файл, а на самом деле
ссылается на файл-оригинал.<b style='mso-bidi-font-weight:normal'><a name="m7"><o:p></o:p></b></p>

<p class=a>В языках программирования термины объект (значение), указатель и
ссылка имеют примерно аналогичный смысл, но касаются способов доступа и
передачи значений переменных.</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>терминология<span style='mso-spacerun:yes'> 
</span><b style='mso-bidi-font-weight:normal'><a name="m8">ссылка, значение </b>касается
фундаментальных свойств переменных в языках программирования. Имя переменной в
различных контекстах может восприниматься как ее значение (содержимое памяти),
так и ссылка на нее (адрес памяти, указатель)(см. <b style='mso-bidi-font-weight:
normal'><a name="m9">1.3</b>). Например, при присваивании левая часть рассматривается как
ссылка, а правая – как значение (см. <b style='mso-bidi-font-weight:normal'><a name="m10">1.4</b>);</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>при передаче формальных параметров при вызове
процедур (функций) практически во всех языках программирования реализованы
способы передачи <b style='mso-bidi-font-weight:normal'><a name="m11">по ссылке </b>и <b
style='mso-bidi-font-weight:normal'>по значению;</b></p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>в Паскале и Си определено понятие <b
style='mso-bidi-font-weight:normal'>указатель </b>как переменная особого вида,
содержащая адрес размещения в памяти другой переменной. Использование
указателей позволяется создавать динамические структуры данных, в которых
элементы взаимно ссылаются друг на друга;</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>и, наконец, в Си существует расширенная интерпретация
указателя, именуемая <b style='mso-bidi-font-weight:normal'><a name="m12">адресной
арифметикой, </b>которая позволяет интерпретировать значение любого указателя
как адрес не отдельной переменной, а памяти в целом, где она размещена.</p>

<h3>Указатель в Си</h3>

<p class=a>Передавать данные между программами, данные от одной части программы
к другой (например, от вызывающей функции к вызываемой) можно двумя способами<span
style='font-family:"Times New Roman"'>:<o:p></o:p></span></p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>создавать в каждой точке программы (например, на
входе функции) копию тех данных, которые необходимо обрабатывать<span
style='font-family:"Times New Roman"'>;<o:p></o:p></span></p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>передавать информацию о том, где в памяти
расположены данные. Такая информация, естественно, является более компактной,
чем сами данные, и ее условно можно назвать указателем. Получаем «дилетантское»
определение указателя<span style='font-family:"Times New Roman"'>:</span> <b
style='mso-bidi-font-weight:normal'>указатель </b><b style='mso-bidi-font-weight:
normal'><a name="m13"><span style='font-family:Arial;mso-bidi-font-family:"Times New Roman"'>-</span><span
style='mso-spacerun:yes'>  </span>переменная, содержащая информацию о
расположении в памяти другой переменной.</b></p>

<p class=a>Наряду с указателем в программировании также используется термин <b
style='mso-bidi-font-weight:normal'>ссылка. </b><span
style='mso-spacerun:yes'>  </span>Ссылка
– содержанием ссылки также является адресная информация об объекте
(переменной), но внешне она выглядит как переменная (синоним оригинала).</p>

<p class=a4 align=center style='text-align:center'>
<img border="0" src="Images/052-01.gif" width="593" height="204"><p align="center"><br
style='mso-ignore:vglayout' clear=ALL>
<b><a name="m14">рис. 52-1. Указатель в информационных технологиях и в архитектуре</b></p>
</p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m15">Указатель как элемент
архитектуры компьютера. </b>Указатели занимают особое место среди типов данных,
потому что они проецируют на язык программирования ряд важных принципов
организации обработки данных в компьютере. Понятие указателя связано с такими
понятиями компьютерной архитектуры как адрес, косвенная адресация, организация
внутренней (оперативной) памяти. От них мы и будем отталкиваться<b
style='mso-bidi-font-weight:normal'>.<span style='mso-spacerun:yes'> 
</span>Внутренняя (оперативная) память </b>компьютера представляет собой
упорядоченную последовательность байтов или машинных слов (ячеек памяти), проще
говоря - массив. Номер байта или слова памяти, через который оно доступно как
из команд компьютера, так и во всех других случаях, называется <b
style='mso-bidi-font-weight:normal'>адресом</b>. Если в команде непосредственно
содержится адрес памяти, то такой доступ этому слову памяти называется <b
style='mso-bidi-font-weight:normal'>прямой адресацией</b>. </p>

<p class=a>Возможен также случай, когда машинное слово содержит адрес другого
машинного слова. Тогда доступ к данным во втором машинном слове через первое
называется <b style='mso-bidi-font-weight:normal'><a name="m16">косвенной адресацией</b>.
Команды косвенной адресации имеются в любом компьютере и являются основой
любого регулярного процесса обработки данных. То же самое можно сказать о языке
программирования. Даже если в нем отсутствуют указатели, как таковые, работа с
массивами базируется на аналогичных способах адресации данных.</p>

<p class=a>В языках программирования имя переменной ассоциируется с адресом
области памяти, в которой транслятор размещает ее в процессе трансляции
программы. Все операции над обычными переменными преобразуются в команды с прямой
адресацией к соответствующим словам памяти. </p>

<p class=a4 align=left style='text-align:left'>Таким образом, в компьютерной
архитектуре <b style='mso-bidi-font-weight:normal'><a name="m17">указатель - переменная,
содержимым которой является адрес другой переменной</b>. </p>

<p class=a>Соответственно, основная операция для указателя - это косвенное
обращение по нему к той переменной, адрес которой он содержит. В Си имеется
специальная операция <b style='mso-bidi-font-weight:normal'><a name="m18">* - </b>звездочка,
которую называют <b style='mso-bidi-font-weight:normal'><a name="m19">косвенным обращением по
указателю. </b>В более широком смысле ее следует понимать как переход от
переменной-указателя к той переменной (объекту), на которую он ссылается.<span
style='mso-spacerun:yes'>  </span>В дальнейшем будем пользоваться такими
терминами: </p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>указатель, который содержит адрес переменной, <b
style='mso-bidi-font-weight:normal'>ссылается</b> на эту переменную или <b
style='mso-bidi-font-weight:normal'>назначен</b> на нее; </p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>переменная, адрес которой содержится в
указателе, называется <b style='mso-bidi-font-weight:normal'><a name="m20">указуемой</b>
переменной. </p>

<p class=a4 align=center style='text-align:center'>
<p align="center">
<img border="0" src="Images/052-02.gif" width="595" height="111"><br
style='mso-ignore:vglayout' clear=ALL>
<b style='mso-bidi-font-weight:normal'><a name="m21">рис. 52-2. Определение указателя и
операции над ним</b></p>
</p>

<p class=a>Последовательность действий при работе с указателем включает 3 шага:</p>

<p class=a4>1. Определение указуемых переменных и переменной-указателя. Для
переменной-указателя это делается особым образом. </p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>int<span style='mso-tab-count:1'>         </span>a,x;<span
style='mso-tab-count:1'>       </span>// Обычные целые переменнные</p>

<p class=a0>int<span style='mso-tab-count:1'>         </span>*p;<span
style='mso-tab-count:1'>        </span>// Переменная - указатель на другую<span
style='mso-spacerun:yes'>  </span>целую переменную</p>

<p class=a4>В определении указателя присутствует та же самая операция
косвенного обращения по указателю. В соответствии с принципами контекстного
определения типа переменной (см. 5.5) эту фразу следует понимать так: переменная
<b style='mso-bidi-font-weight:normal'><a name="m22"><span lang=EN-US style='mso-ansi-language:
EN-US'>p</span><span lang=EN-US> </span></b>при косвенном обращении к ней дает
переменную типа <b style='mso-bidi-font-weight:normal'><a name="m23"><span lang=EN-US
style='mso-ansi-language:EN-US'>int</span>. </b>То есть свойство ее – быть
указателем, определяется в контексте возможного применения к ней операции <b
style='mso-bidi-font-weight:normal'>*.</b> Обратите внимание, что в определении
присутствует <b style='mso-bidi-font-weight:normal'><a name="m24">указуемый тип данных. </b>Это
значит, что указатель может ссылаться не на любые переменные, а только на
переменные заданного типа, то есть указатель в Си <b style='mso-bidi-font-weight:
normal'><a name="m25">типизирован.<o:p></o:p></b></p>

<p class=a4>2. Связывание указателя с указуемой переменной. Значением указателя
является адрес другой переменной. <span
style='mso-spacerun:yes'> </span>Следующим шагом указатель должен быть
настроен, или <b style='mso-bidi-font-weight:normal'><a name="m26">назначен </b>на
переменную, на которую он будет ссылаться.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>p = &amp;a;<span style='mso-tab-count:1'> </span>// Указатель
содержит адрес переменной a</p>

<p class=a4>Операция <b style='mso-bidi-font-weight:normal'><a name="m27">&amp; </b>понимается
буквально как адрес переменной, стоящей справа от нее. В более широкой интерпретации
она «превращает» объект в указатель на него<span style='mso-spacerun:yes'> 
</span>(или производит переход от объекта к указателю на него) и является в
этом смысле прямой противоположностью операции <b style='mso-bidi-font-weight:
normal'><a name="m28">*, </b>которая «превращает» указатель в указуемый объект. То же самое
касается типов данных. Если переменная <b style='mso-bidi-font-weight:normal'><a name="m29"><span
lang=EN-US style='mso-ansi-language:EN-US'>a</span><span lang=EN-US> </span></b>имеет
тип <b style='mso-bidi-font-weight:normal'><a name="m30"><span lang=EN-US style='mso-ansi-language:
EN-US'>int</span>, </b>то выражение <b style='mso-bidi-font-weight:normal'><a name="m31">&amp;<span lang=EN-US style='mso-ansi-language:
EN-US'>a</span><span lang=EN-US> </span></b>имеет тип – указатель на <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>int</span><span lang=EN-US> </span></b>или <b style='mso-bidi-font-weight:
normal'><a name="m32"><span lang=EN-US style='mso-ansi-language:EN-US'>int</span>*.<o:p></o:p></b></p>

<p class=a4>3. И наконец, в любом выражении косвенное обращение по указателю
интерпретируется как переход от него к указуемой переменной с выполнением над
ней всех далее перечисленных в выражении операций.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>*<span lang=EN-US style='mso-ansi-language:EN-US'>p</span>=100;<span
style='mso-tab-count:2'>             </span>// Эквивалентно <span lang=EN-US
style='mso-ansi-language:EN-US'>a</span>=100<b style='mso-bidi-font-weight:
normal'><a name="m33"><o:p></o:p></b></p>

<p class=a0>x = x + *p;<span style='mso-tab-count:1'>         </span>// Эквивалентно
<span lang=EN-US style='mso-ansi-language:EN-US'>x</span>=<span lang=EN-US
style='mso-ansi-language:EN-US'>x</span>+<span lang=EN-US style='mso-ansi-language:
EN-US'>a</span></p>

<p class=a0>(*<span lang=EN-US style='mso-ansi-language:EN-US'>p</span>)++;<span
style='mso-tab-count:2'>              </span>// Эквивалентно <span lang=EN-US
style='mso-ansi-language:EN-US'>a</span>++</p>

<p class=a4><i style='mso-bidi-font-style:normal'>Замечание: </i>при обращении
через указатель имя указуемой переменной в выражении отсутствует. Поэтому можно
считать, что обращение через указатель производится к «безымянной» переменной,
а операцию «<b style='mso-bidi-font-weight:normal'><a name="m34">*» </b>называются также
операцией <b style='mso-bidi-font-weight:normal'><a name="m35">разыменования указателя.<o:p></o:p></b></p>

<p class=a4>
<img border="0" src="Images/yan-in.jpg" width="34" height="31" align="left">Указатель
дает «<b style='mso-bidi-font-weight:normal'><a name="m36">степень свободы</b>» или
универсальности любому алгоритму обра<img border="0" src="Images/052-03.jpg" width="240" height="204" align="right">ботки данных. Действительно, если
некоторый фрагмент программы получает данные непосредственно в некоторой
переменной, то он может обрабатывать ее и только ее. Если же данные он получает
через указатель, то обработка данных (указуемых переменных) может производиться
в любой области памяти компьютера (или программы). При этом сам фрагмент может
и «не знать», какие данные он обрабатывает, если значение самого указателя
передано программе извне.</p>
<p class=a4>&nbsp;</p>

<h3>Адресная арифметика и управление памятью</h3>

<p class=a>Способность указателя ссылаться на «отдельно стоящие» переменные не
меняет качества языка, поскольку нельзя выйти за рамки множества указуемых
переменных, определенных в программе. Такая же концепция указателя принята,
например, в Паскале. Но в Си существует еще одна, расширенная интерпретация,
позволяющая через указатель работать с массивами и с памятью компьютера ни
низком (архитектурном) уровне без каких-либо ограничений со стороны
транслятора. Это<span style='mso-spacerun:yes'>  </span>«свобода самовыражения»
обеспечивается одной дополнительной<span style='mso-spacerun:yes'>  </span>операцией
<b style='mso-bidi-font-weight:normal'><a name="m37">адресной арифметики. </b>Но сначала
определим свойства указателя в соответствии с расширенной интерпретацией.</p>
<p class=a>&nbsp;</p>

<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;margin-left:35.45pt;margin-right:32.9pt'>

<p class=a2 style='margin-top:12.0pt;margin-right:0cm;margin-bottom:12.0pt;
margin-left:0cm'>Любой указатель в Си ссылается на неограниченную в обе стороны
область памяти (массив), заполненную переменными указуемого типа с индексацией
элементов относительно текущего положения указателя.</p>

</div>

<p class=a>Такие свойства указателя обеспечиваются <b style='mso-bidi-font-weight:
normal'><a name="m38">адресной арифметикой,</b> которая базируется на нестандартной
интерпретации операции <b style='mso-bidi-font-weight:normal'><a name="m39">указатель+целое </b>и
других, производных от нее операциях: </p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>любой указатель потенциально ссылается на
неограниченную в обе стороны область памяти, заполненную переменными указуемого
типа; </p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>переменные в области нумеруются от текущей
указуемой переменной, которая получает относительный номер 0. Переменные в
направлении возрастания адресов памяти нумеруются положительными значениями
1,2,3..., убывания - отрицательными - -1,-2..; </p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='mso-spacerun:yes'> </span>результатом
операции указатель+i является адрес i-ой переменной (значение указателя на i-ую
переменную) в этой области относительно текущего положения указателя. </p>

<span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman CYR";
mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:RU;mso-fareast-language:RU;mso-bidi-language:AR-SA'><br
clear=all style='page-break-before:always'>
</span>

<p class=a1 style='margin-left:46.35pt;text-indent:0cm;mso-list:none;
tab-stops:42.55pt; text-align:center'>
<img border="0" src="Images/052-04.gif" width="417" height="280"><p class=a4 align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><a name="m40">рис. 52-3. Адресная арифметика</b></p>

<p class=a1 style='margin-left:46.35pt;text-indent:0cm;mso-list:none;
tab-stops:42.55pt'><o:p>&nbsp;</o:p></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0cm 5.4pt 0cm 5.4pt;mso-border-insideh:.5pt solid windowtext;
 mso-border-insidev:.5pt solid windowtext'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><o:p>&nbsp;</o:p></p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0 align=center style='text-align:center'>Смысл</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>*<span lang=EN-US style='mso-ansi-language:EN-US'>p</span></p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Значение указуемой переменной</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>p</span>+<span
  lang=EN-US style='mso-ansi-language:EN-US'>i</span></p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Указатель на i-ю переменную после указуемой</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>p</span>-<span
  lang=EN-US style='mso-ansi-language:EN-US'>i</span></p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Указатель на i-ю переменную перед указуемой</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>*(p+i)<o:p></o:p></span></p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Значение i-й переменной после указуемой</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>p[i]<o:p></o:p></span></p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Значение i-й переменной после указуемой</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:6'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>p++<o:p></o:p></span></p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Переместить указатель на следующую переменную</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:7'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>p--<o:p></o:p></span></p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Переместить указатель на предыдущую переменную</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:8'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>p+=i</p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Переместить указатель на i переменных вперед</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:9'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>p-=i</p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Переместить указатель на i переменных назад</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:10'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>*p++</p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Получить значение указуемой переменной и переместить указатель к
  следующей </p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:11'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>*(--p)</p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Переместить указатель к переменной, предшествующей<span
  style='mso-spacerun:yes'>  </span>указуемой, и получить ее значение</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:12;mso-yfti-lastrow:yes'>
  <td width=57 valign=top style='width:42.55pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>p+1</p>
  </td>
  <td width=499 valign=top style='width:373.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Указатель на свободную память вслед за указуемой переменной</p>
  </td>
 </tr>
</table>

<p class=a><o:p>&nbsp;</o:p></p>

<p class=a>В операциях адресной арифметики транслятором автоматически
учитывается размер указуемых переменных, то есть <b style='mso-bidi-font-weight:
normal'><a name="m41">+i</b> понимается не как смещение на <b style='mso-bidi-font-weight:
normal'><a name="m42">i</b> байтов или слов, а как смещение на <b style='mso-bidi-font-weight:
normal'><a name="m43">i</b> указуемых переменных. Другая важная особенность: при перемещении
указателя нумерация переменных в памяти остается относительной и всегда
производится от текущей указуемой переменной. </p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m44">Указатели и массивы. </b>Нетрудно
заметить, что указатель в Си имеет много общего с массивом. Наоборот, труднее
сформулировать, чем они отличаются друг от друга. Действительно, разница лежит
не в принципе работы с указуемыми переменными, а в способе назначения указателя
и массива на ту память, с которой они работают. Образно говоря, указателю
соответствует массив, «не привязанный» к конкретной памяти, а массиву
соответствует указатель, постоянно назначенный на выделенную транслятором
область памяти.<span style='mso-spacerun:yes'>  </span>Это положение вещей
поддерживается еще одним правилом: имя массива во всех выражениях
воспринимается как указатель на его начало, то есть имя массива <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>A</span><span lang=EN-US> </span></b>эквивалентно выражению <b
style='mso-bidi-font-weight:normal'>&amp;</b><b style='mso-bidi-font-weight:
normal'><a name="m45"><span lang=EN-US style='mso-ansi-language:EN-US'>A</span>[0] </b>и
имеет тип «указатель на тип данных элементов массива». Таким образом, различие
между указателем и массивом аналогично различию между переменной и константой: указатель
- это ссылочная переменная, а имя массива - ссылочная константа, привязанная к
конкретному адресу памяти.</p>

<p class=a4>
<img border="0" src="Images/smile.jpg" width="40" height="41" align="left">Если
МАССИВ=ПАМЯТЬ+УКАЗАТЕЛЬ (начальный адрес), то УКАЗАТЕЛЬ=МАССИВ-ПАМЯТЬ, т.е.
указатель это «массив без памяти», <span
style='mso-spacerun:yes'> </span>«свободно перемещающийся по памяти» массив.</p>

<p class=a1 style='margin-left:1.0cm;text-indent:0cm;mso-list:none;tab-stops:
42.55pt'><o:p>&nbsp;</o:p></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='margin-left:12.5pt;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0cm 5.4pt 0cm 5.4pt;mso-border-insideh:
 .5pt solid windowtext;mso-border-insidev:.5pt solid windowtext'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=102 valign=top style='width:76.3pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Массив</p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Указатель</p>
  </td>
  <td width=397 valign=top style='width:297.7pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Различия и сходства</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=102 valign=top style='width:76.3pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
  style='mso-spacerun:yes'> </span>int A[20]<o:p></o:p></span></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
  style='mso-spacerun:yes'> </span>int *p<o:p></o:p></span></p>
  </td>
  <td width=397 valign=top style='width:297.7pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><o:p>&nbsp;</o:p></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width=102 valign=top style='width:76.3pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
  style='mso-spacerun:yes'> </span>A<o:p></o:p></span></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
  style='mso-spacerun:yes'> </span>p<o:p></o:p></span></p>
  </td>
  <td width=397 valign=top style='width:297.7pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Оба интерпретируются как указатели и оба имеют тип <span
  lang=EN-US style='mso-ansi-language:EN-US'>int</span>*</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td width=102 valign=top style='width:76.3pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
  style='mso-ansi-language:EN-US'>---<o:p></o:p></span></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
  style='mso-spacerun:yes'> </span>p=&amp;A[</span>3<span lang=EN-US
  style='mso-ansi-language:EN-US'>]<o:p></o:p></span></p>
  </td>
  <td width=397 valign=top style='width:297.7pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Указатель требует настройки «на память»</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4'>
  <td width=102 valign=top style='width:76.3pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
  style='mso-ansi-language:EN-US'>A[i]<o:p></o:p></span></p>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>&amp;A[i]<o:p></o:p></span></p>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>A+i<o:p></o:p></span></p>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>*(A+i)<o:p></o:p></span></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
  style='mso-spacerun:yes'> </span>p[i]<o:p></o:p></span></p>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
  style='mso-spacerun:yes'> </span>&amp;p[i]<o:p></o:p></span></p>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
  style='mso-spacerun:yes'> </span>p+i<o:p></o:p></span></p>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
  style='mso-spacerun:yes'> </span>*(p+i)<o:p></o:p></span></p>
  </td>
  <td width=397 valign=top style='width:297.7pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Работа с областью памяти как с обычным массивом, так и через
  указатель полностью идентична вплоть до синтаксиса</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5;mso-yfti-lastrow:yes'>
  <td width=102 valign=top style='width:76.3pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
  style='mso-ansi-language:EN-US'>----<o:p></o:p></span></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
  style='mso-spacerun:yes'> </span>p++<o:p></o:p></span></p>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>*p++<o:p></o:p></span></p>
  <p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>p+=i<o:p></o:p></span></p>
  </td>
  <td width=397 valign=top style='width:297.7pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a0>Указатель может перемещаться по памяти относительно своего
  текущего положения</p>
  </td>
 </tr>
</table>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m46">Указатели и многомерные
массивы. </b>Двумерный массив реализован как «массив массивов»<span
style='mso-spacerun:yes'>  </span>- одномерный массив с количеством элементов,
соответствующих первому индексу, причем каждый элемент представляет собой
массив элементов базового типа с количеством, соответствующим второму индексу.
Например,<span style='mso-spacerun:yes'>  </span><b style='mso-bidi-font-weight:
normal'><a name="m47">char<span style='mso-tab-count:1'>         </span>A[20][80]</b><span
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'> </span>определяет
массив из 20 массивов по 80 символов в каждом и никак иначе. </p>

<p class=a><span style='mso-spacerun:yes'> </span>Идентификатор массива без
скобок интерпретируется как адрес нулевого элемента нулевой строки, или
указатель на базовый тип данных. В нашем примере идентификатору <b
style='mso-bidi-font-weight:normal'>A</b> будет соответствовать выражение <b
style='mso-bidi-font-weight:normal'>&amp;A[0][0]</b> с типом <b
style='mso-bidi-font-weight:normal'>char*.</b> </p>

<p class=a>Имя двумерного массива с единственным индексом интерпретируется как
начальный адрес соответствующего внутреннего одномерного массива. <b
style='mso-bidi-font-weight:normal'>A[i]</b> понимается как <b
style='mso-bidi-font-weight:normal'>&amp;A[i][0],</b> то есть начальный адрес <b
style='mso-bidi-font-weight:normal'>i-го</b> массива символов. </p>

<p class=a>От такого многообразия возможностей работы с указателями нетрудно
прийти в замешательство: как вообще с ними работать, кто за что отвечает? Действительно,
при<span style='mso-spacerun:yes'>  </span>работе с указателями легко выйти «за
рамки дозволенного», т.е. определенных самим же программистом структур данных.
Поэтому попробуем еще раз обсудить принципиальные моменты адресной арифметики.</p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m48">Границы памяти, адресуемой
указателем. </b>Если любой указатель ссылается на неограниченную область
памяти, то возникают резонные вопросы: где границы этой памяти, кто и как их
определяет, кто и как контролирует нарушение этих границ указателем. Ответ на
него неутешителен для начинающего программиста: транслятор принципиально
исключает такой контроль как в процессе трансляции программы, так и в процессе
ее выполнения. Он не помещает в генерируемый программный код каких-либо
дополнительных команд, которые могли бы это сделать. И дело здесь прежде всего
в самой концепции языка Си: не включать в программный код ничего, не
предусмотренного самой программой, и не вносить ограничений в возможности
работы с данными. Следовательно, ответственность ложится целиком на работающую
программу (точнее, на программиста, который ее написал). </p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m49">На что ссылается указатель? </b>Cинтаксис
языка в операциях с указателями не позволяет различить в конкретной точке
программы, что подразумевается под этим указателем - указатель на отдельную
переменную, массив (начало, середину конец...), какова размерность массива и
т.д.. Все эти вопросы целиком находятся в ведении работающей программы. Все же
даже поверхностный взгляд на программу позволяет сказать, с чем же работает
указатель – с отдельной переменной или массивом.</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol; mso-ansi-language:EN-US' lang="EN-US">·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>наличие операции инкремента или индексации
говорит о работе указателя с памятью (массивом)<span lang=EN-US
style='mso-ansi-language:EN-US'>;<o:p></o:p></span></p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>использование исключительно операции косвенного
обращения по указателю свидетельствует о работе с отдельной переменной.</p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m50">Типичные ошибки при работе с
указателями. </b>Основная ошибка, которая периодически возникает даже у опытных
программистов – указатель ассоциируется с адресуемой им памятью. Память – это
прежде всего ресурс, а указатель – ссылка на него. Здесь же отметим наиболее
грубые ошибки:</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>неинициализированный указатель. После
определения указатель ссылается «в никуда», тем не менее программист работает
через него с переменной или массивом, записывая данные по случайным адресам;</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>несколько указателей, ссылающихся на общий
массив – это все-таки один массив, а не несколько. Если программа работает с
несколькими массивами, то они должны либо создаваться динамически, либо браться
из двумерного массива;</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>выход указателя за границы памяти. Например,
конец строки отмечается символов ‘\0’, начало же формально соответствует
начальному положению указателя. Если в процессе работы со строкой требуется
возвращение на ее начало, то начальный указатель необходимо запоминать, либо
дополнительно отсчитывать символы.</p>

<h3>Другие операции над указателями</h3>

<p class=a>В<b style='mso-bidi-font-weight:normal'><a name="m51"> </b>процессе определения
указателей мы рассмотрели основные операции над ними: </p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>операция присваивания указателей одного типа.
Назначение указателю адреса переменной <b style='mso-bidi-font-weight:normal'><a name="m52">p=&amp;a</b>
есть одни из вариантов такой операции;</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>операция косвенного обращения по указателю
(разыменования указателя); </p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='mso-spacerun:yes'> </span>операция
адресной арифметики «указатель+целое» и все производные от нее. </p>

<p class=a>Кроме того, имеется еще ряд операций, понимание которых не выходит
за рамки уже имеющейся интерпретации указателя<span style='font-family:"Times New Roman"'>.</span></p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m53">Сравнение указателей на
равенство</b>. Равенство указателей однозначно понимается как совпадение
адресов, то есть назначение их на одну и ту же область памяти (переменную). </p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m54">Пустой указатель (<span lang=EN-US style='mso-ansi-language:
EN-US'>NULL</span>-указатель)</b>. Среди множества адресов выделяется такой,
который не может быть использован в правильно работающей программе для
размещения данных. Это значение адреса называется <b style='mso-bidi-font-weight:
normal'><a name="m55">NULL-указателем</b> или «пустым» указателем. Считается, что указатель с
таким значением не является корректным (указывает «в никуда»). Обычно такое
значение определяется в стандартной библиотеке ввода-вывода в<span
style='mso-spacerun:yes'>  </span>виде <b style='mso-bidi-font-weight:normal'><a name="m56">#define
NULL 0.<o:p></o:p></b></p>

<p class=a>Значение NULL может быть присвоено любому указателю. Если указатель
по логике работы программы может иметь такое значение, то перед косвенным
обращением по нему его нужно проверять на достоверность: </p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int<span
style='mso-tab-count:1'>         </span>*p,a;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>if (…) p=NULL;
else p=&amp;a; ...<o:p></o:p></span></p>

<p class=a0>if (p !=NULL) *p = 5;<span style='mso-spacerun:yes'>    </span>...</p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m57">Сравнение указателей на
«больше-меньше»</b>: при сравнении указателей производится сравнение
соответствующих адресов как беззнаковых переменных. Если оба указателя
ссылаются на элементы одного и того же массива, тогда соотношение
«больше-меньше» следует понимать как «ближе-дальше» к началу массива: </p>

<p class=a0 style='text-indent:36.0pt'><span style='font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p>

<p class=a0>//--- Симметричная перестановка символов строки</p>

<p class=a0><span style='mso-spacerun:yes'> </span>void F(char *p){</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>for</span> (<span lang=EN-US style='mso-ansi-language:
EN-US'>char</span> *<span lang=EN-US style='mso-ansi-language:EN-US'>q</span>=<span
lang=EN-US style='mso-ansi-language:EN-US'>p</span>; *<span lang=EN-US
style='mso-ansi-language:EN-US'>q</span>!=0; <span lang=EN-US style='mso-ansi-language:
EN-US'>q</span>++);<span style='mso-tab-count:2'>                    </span>// Указатель
<span lang=EN-US style='mso-ansi-language:EN-US'>q</span><span lang=EN-US> </span>до
конца строки</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>for</span> (<span lang=EN-US style='mso-ansi-language:
EN-US'>q</span>--; <span lang=EN-US style='mso-ansi-language:EN-US'>q</span>&gt;<span
lang=EN-US style='mso-ansi-language:EN-US'>p</span>; <span lang=EN-US
style='mso-ansi-language:EN-US'>p</span>++, <span lang=EN-US style='mso-ansi-language:
EN-US'>q</span>--)<span style='mso-spacerun:yes'>      </span><span
style='mso-tab-count:2'>                      </span>// Пока <span lang=EN-US
style='mso-ansi-language:EN-US'>p</span><span lang=EN-US> </span>левее <span
lang=EN-US style='mso-ansi-language:EN-US'>q</span></p>

<p class=a0><span style='mso-tab-count:1'>            </span><span
style='mso-spacerun:yes'>  </span>{ char c; c=*p; *p=*q; *q=c; } <span
style='mso-tab-count:1'>    </span>// 3 стакана над переменными под указателями</p>

<p class=a0><span style='mso-spacerun:yes'> </span>}</p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m58">Разность значений указателей</b>.<span
style='mso-spacerun:yes'>  </span>В случае, когда указатели ссылаются на один и
тот же массив, их разность понимается как «расстояние между ними», выраженную в
количестве указуемых переменных. </p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m59">Преобразование типа
указателя. </b>Отдельная операция преобразования, связанная с изменением типа
указуемых элементов при сохранении значения указателя (адреса), используется
при работе с память на низком (архитектурном) уровне (см. <b style='mso-bidi-font-weight:
normal'><a name="m60">9.2</b>). Отдельный разговор о преобразовании типов указателей при
наследовании (см. <b style='mso-bidi-font-weight:normal'><a name="m61">11.3, 11.4</b>). Сюда
же относится <b style='mso-bidi-font-weight:normal'><a name="m62">преобразование вида
«целое-указатель».</b></p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m63">Указатель типа void*.</b>
Если фрагмент программы «не должен знать» или не имеет достаточной информации о
структуре данных в адресуемой области памяти, если указатель во время работы
программы ссылается на данные<span style='mso-spacerun:yes'>  </span>различных
типов, то используется указатель на неопределенный (пустой) тип <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>void</span></b>. Указатель понимается как адрес памяти как таковой, с
неопределенной организацией и неизвестной размерностью указуемой переменной.
Его можно присваивать, передавать в качестве параметра и результата функции,
менять тип указателя, но операции косвенного обращения и адресной арифметики с
ним недопустимы. </p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>extern int
fread(void *, int, int, FILE *);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int<span
style='mso-tab-count:1'>         </span>A[20];<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>fread(A,
sizeof(int), 20, fd);<o:p></o:p></span></p>

<p class=a>Функция <b style='mso-bidi-font-weight:normal'><a name="m64">fread</b> выполняет
чтение из двоичного файла <b style='mso-bidi-font-weight:normal'><a name="m65">n</b> записей
длиной по <b style='mso-bidi-font-weight:normal'><a name="m66">m</b> байтов, при этом
структура записи для функции неизвестна. Поэтому начальный адрес области памяти
передается формальным параметром типа <b style='mso-bidi-font-weight:normal'><a name="m67">void*.</b>
При подстановке фактического параметра <b style='mso-bidi-font-weight:normal'><a name="m68">A</b>
типа <b style='mso-bidi-font-weight:normal'><a name="m69">int* </b>производится неявное
преобразование его к типу <b style='mso-bidi-font-weight:normal'><a name="m70">void*.</b> </p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>extern void
*malloc(int);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int *p = <b
style='mso-bidi-font-weight:normal'>(int*)</b>malloc(sizeof(int)*20); <span
style='mso-tab-count:1'>         </span>// </span>Явное<span style='mso-ansi-language:
EN-US'> </span>преобразование<span style='mso-ansi-language:EN-US'> <b
style='mso-bidi-font-weight:normal'><span lang=EN-US>void*</span></b><span
lang=EN-US> </span></span>к<span style='mso-ansi-language:EN-US'> <b
style='mso-bidi-font-weight:normal'><span lang=EN-US>int*</span></b><span
lang=EN-US><o:p></o:p></span></span></p>

<p class=a>Функция <b style='mso-bidi-font-weight:normal'><a name="m71">malloc</b> возвращает
адрес зарезервированной области динамической памяти в виде указателя <b
style='mso-bidi-font-weight:normal'>void*.</b> Это означает, что функцией
выделяется память как таковая, безотносительно к размещаемым в ней переменным.
Вызывающая функция явно преобразует тип указателя <b style='mso-bidi-font-weight:
normal'><a name="m72">void*</b> в требуемый тип <b style='mso-bidi-font-weight:normal'><a name="m73">int*</b>
для работы с этой областью как с массивом целых переменных. </p>

<p class=a><i style='mso-bidi-font-style:normal'>Вывод</i>: преобразование
указателя <b style='mso-bidi-font-weight:normal'><a name="m74">void*</b> к любому другому
типу указателя соответствует «смене точки зрения» программы на адресуемую
память от «данные вообще» к «конкретные данные» и наоборот (см. <b
style='mso-bidi-font-weight:normal'>9.2</b>) и должно быть сделано явно.
Преобразование указателя к типу <b style='mso-bidi-font-weight:normal'><a name="m75"><span
lang=EN-US style='mso-ansi-language:EN-US'>void</span>* </b>не требует явного
подтверждения.</p>

<h3>Указатель как формальный параметр и результат функции</h3>

<p class=a>В Си при передаче параметров в функцию по умолчанию используется <b
style='mso-bidi-font-weight:normal'>передача по значению (<span lang=EN-US style='mso-ansi-language:
EN-US'>by</span><span lang=EN-US> </span></b><b style='mso-bidi-font-weight:
normal'><a name="m76"><span lang=EN-US style='mso-ansi-language:EN-US'>value</span>)</b>.
Формальные параметры представляют собой аналог собственных локальных переменных
функции, которым в момент вызова присваиваются значения фактических параметров.
Формальные параметры, представляя собой копии, могут как угодно изменяться - это
не затрагивает соответствующих фактических параметров. </p>

<p class=a>Если же фактический параметр должен быть изменен, то формальный
параметр можно определить как явный указатель. Тогда фактический параметр
должны быть явно передан в виде указателя <span
style='mso-spacerun:yes'> </span>на ту переменную (с использованием операции <b
style='mso-bidi-font-weight:normal'>&amp;</b>). </p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>inc</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>int</span> *<span lang=EN-US
style='mso-ansi-language:EN-US'>p</span>)</p>

<p class=a0>{ (*<span lang=EN-US style='mso-ansi-language:EN-US'>pi</span>)++;
}<span style='mso-tab-count:2'>                     </span>// аналог вызова:<span
style='mso-spacerun:yes'>  </span><span lang=EN-US style='mso-ansi-language:
EN-US'>pi</span> = &amp;<span lang=EN-US style='mso-ansi-language:EN-US'>a</span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>main</span>()</p>

<p class=a0>{ <span lang=EN-US style='mso-ansi-language:EN-US'>int</span><span
style='mso-tab-count:1'>       </span><span lang=EN-US style='mso-ansi-language:
EN-US'>a</span>;<span style='mso-tab-count:3'>                                 </span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>inc</span>(&amp;<span
lang=EN-US style='mso-ansi-language:EN-US'>a</span>); }<span style='mso-tab-count:
2'>                       </span>// *(<span lang=EN-US style='mso-ansi-language:
EN-US'>pi</span>)++ эквивалентно <span lang=EN-US style='mso-ansi-language:
EN-US'>a</span>++</p>

<p class=a>В Си имеется единственное исключение: формальный параметр - массив
передается в виде неявного указателя на его начало, то есть <b
style='mso-bidi-font-weight:normal'>по ссылке</b>. С помощью адресной
арифметики это также можно сделать явно с использованием указателя на его
начало.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int<span
style='mso-tab-count:1'>         </span>sum(int A[],int n)<span
style='mso-tab-count:1'>            </span>// </span>Исходная<span
style='mso-ansi-language:EN-US'> </span>программа<span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-tab-count:2'>             </span><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>{ int<span
style='mso-tab-count:1'>       </span>s,i;<span style='mso-tab-count:3'>                                </span><span
style='mso-tab-count:1'>            </span><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for (i=s=0;
i&lt;n; i++) s+= A[i];<span style='mso-tab-count:3'>                              </span><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return s;} <span
style='mso-tab-count:3'>                                  </span><span
style='mso-spacerun:yes'> </span><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int<span
style='mso-tab-count:1'>         </span>sum(int *p, int n)<span
style='mso-tab-count:1'>            </span>// </span>Эквивалент<span
style='mso-ansi-language:EN-US'> </span>с<span style='mso-ansi-language:EN-US'>
</span>указателем<span lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>{ int<span
style='mso-tab-count:1'>       </span>s,i;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for (i=s=0;
i&lt;n; i++) s+= p[i];<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return s; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int<span
style='mso-tab-count:1'>         </span>x,B[10]={1,4,3,6,3,7,2,5,23,6};<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void main()<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>{ x = sum(B,10); }<span
style='mso-tab-count:1'>          </span>// </span>аналог<span
style='mso-ansi-language:EN-US'> </span>вызова<span lang=EN-US
style='mso-ansi-language:EN-US'>: p = B, n = 10<o:p></o:p></span></p>

<p class=a>В вызове фигурирует идентификатор массива, который
интерпретируется<span style='mso-spacerun:yes'>  </span>как указатель на
начало. Поэтому типы формального и фактического параметров совпадают. Совпадают
также оба варианта функций вплоть до генерируемого кода. </p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m77">Указатель - результат
функции. </b>Функция в качестве результата может возвращать указатель.
Формальная схема функции обязательно включает в себя<span lang=EN-US
style='mso-ansi-language:EN-US'>:<o:p></o:p></span></p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>определение типа результата в заголовке функции
как указателя. Это обеспечивается добавлением пресловутой <b style='mso-bidi-font-weight:
normal'><a name="m78">* </b>перед именем функции - <b style='mso-bidi-font-weight:normal'><a name="m79"><span
lang=EN-US style='mso-ansi-language:EN-US'>int</span> *</b><b style='mso-bidi-font-weight:
normal'><a name="m80"><span lang=EN-US style='mso-ansi-language:EN-US'>F</span>(...</b>;</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>оператор <b style='mso-bidi-font-weight:normal'><a name="m81"><span
lang=EN-US style='mso-ansi-language:EN-US'>return</span><span lang=EN-US> </span></b>возвращает
объект (переменную или выражение), являющееся по своей природе (типу данных)
указателем. Для этого можно использовать локальную переменную - указатель.</p>

<p class=a4>Содержательная сторона проблемы состоит в том, что функция либо <b
style='mso-bidi-font-weight:normal'>выбирает </b>один из известных ей объектов
(переменных), либо <b style='mso-bidi-font-weight:normal'><a name="m82">создает </b>их в
процессе своего выполнения (динамические переменные), возвращая в том и другом
случае указатель на нее. Для выбора у нее не так уж много возможностей. Это
могут быть:</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>глобальные переменные программы;</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>формальные параметры, если они являются
массивами, указателями или<span style='mso-spacerun:yes'>  </span>ссылками, то
есть «за ними стоят» другие переменные.</p>

<p class=a>Функция не может возвратить указатель на локальную переменную или
формальный параметр-значение, поскольку они разрушаются при выходе из функции.
Это приводит к ошибке времени выполнения, не обнаруживаемой транслятором.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>char *F1(){ char cc=’A’;
return &amp;cc; }<o:p></o:p></span></p>

<p class=a>Пример: функция возвращает указатель на минимальный элемент массива.
Массив передается как формальный параметр.</p>

<p class=a4><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------52-01.cpp</p>

<p class=a0>//----- Результат функции - указатель на минимальный элемент</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>int *min(int A[], int n){<o:p></o:p></span></p>

<p class=a0>
<span
style='mso-spacerun:yes; mso-ansi-language:EN-US' lang="EN-US"> </span>int *pmin, i;<span
style='mso-spacerun:yes'>             </span><span style='mso-tab-count:1'>                  </span>// Рабочий указатель, содержащий
результат</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>for (i=1, pmin=A; i&lt;n; i++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>if (A[i] &lt; *pmin) pmin = &amp;A[i];<o:p></o:p></span></p>

<p class=a0>
<span
style='mso-spacerun:yes; mso-ansi-language:EN-US' lang="EN-US"> </span>return(pmin); }<span
style='mso-spacerun:yes'>           </span><span style='mso-tab-count:2'>                </span>//
В операторе return - значение указателя</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>void main() {<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>int B[5]={3,6,1,7,2};<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>printf(&quot;min=%d\n&quot;,*min(B,5)); }<o:p></o:p></span></p>

<p class=a>Прежде всего, обратим внимание на синтаксис. Заголовок функции
написан таким образом, как будто имя функции является указателем на <b
style='mso-bidi-font-weight:normal'>int</b>. Этим способом и обозначается, что
ее результат - указатель. Оператор <b style='mso-bidi-font-weight:normal'><a name="m83">return</b>
возвращает значение переменной-указателя <b style='mso-bidi-font-weight:normal'><a name="m84">pmin</b>,
то есть адрес. Вообще в нем может стоять любое выражение, значение которого
является указателем, например: </p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return &amp;A[k];<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return pmin+i;<o:p></o:p></span></p>

<p class=a0>return A+<span lang=EN-US style='mso-ansi-language:EN-US'>k</span>;<span
style='mso-spacerun:yes'>  </span></p>

<p class=a>Указатель -<span style='font-family:"Times New Roman"'> </span>результат
функции может ссылаться не только на отдельную переменную, но и на массив. В
этом смысле он не отличается ничем от других указателей. </p>

<h3>Ссылка как неявный указатель</h3>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=a4>Во многих языках программирования указатель присутствует, но в завуалированном
виде в форме ссылки. Под ссылкой понимается переменная, которая не имеет
самостоятельного значения, а отображается на другую переменную, т.е. является
ее <b style='mso-bidi-font-weight:normal'><a name="m85">синонимом</b>. Во всем остальном она
не отличается от обычной переменной. В отличие от явного указателя обращение по
ссылке к объекту-прототипу имеет тот же самый синтаксис, что и обращение к
объекту-прототипу.</p>

<p class=a><b><a name="m86">Ссылка – неявный указатель, имеющий синтаксис указуемого объекта
(синоним).<span style='mso-spacerun:yes'>  </span></b><span style='mso-bidi-font-weight:
bold'>В Си имеется возможность определения такого синонима с использованием
символа &amp;:<o:p></o:p></span></p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>a</span>=5;<span
style='mso-tab-count:2'>             </span>// Переменная – прототип</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int</span> &amp;<span
lang=EN-US style='mso-ansi-language:EN-US'>b</span>=<span lang=EN-US
style='mso-ansi-language:EN-US'>a</span>;<span style='mso-tab-count:1'>           </span>//
Переменная <b style='mso-bidi-font-weight:normal'><a name="m87"><span lang=EN-US
style='mso-ansi-language:EN-US'>b</span> – </b>ссылка на переменную <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>a</span><o:p></o:p></b></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>b</span>++;<span
style='mso-tab-count:2'>                 </span>// Операция над <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>b</span><span lang=EN-US> </span></b>есть операция над прототипом <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>a</span><o:p></o:p></b></p>

<p class=a0><b style='mso-bidi-font-weight:normal'><a name="m88"><o:p>&nbsp;</o:p></b></p>

<p class=a>Наиболее употребительным в Си, а в других языках – единственно
возможным является использование ссылки как формального параметра функции. Это
означает, что при вызове функции формальный параметр создается как переменная-<b
style='mso-bidi-font-weight:normal'>ссылка, </b>который <b style='mso-bidi-font-weight:
normal'><a name="m89">отображается </b>на соответствующий фактический параметр. Формальный
параметр –ссылка аналогично отмечается в списке параметров значком <b
style='mso-bidi-font-weight:normal'>&amp;</b> перед именем. В остальном
синтаксис работы с параметром-ссылкой и параметром-значением идентичны. Различие
заключается в способе взаимодействия с фактически параметром:</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>при передаче по значению формальный параметр
является копией фактического, он может быть изменен независимо от значения
оригинала – <span style='mso-spacerun:yes'> </span>фактического параметра.
Такой параметр является исключительно <b style='mso-bidi-font-weight:normal'><a name="m90">входным;<o:p></o:p></b></p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>при передаче по ссылке формальный параметр
отображается на фактический, и его изменение сопровождается изменением
фактического параметра-прототипа. Такой параметр может быть как <b
style='mso-bidi-font-weight:normal'>входным, </b>так и <b style='mso-bidi-font-weight:
normal'><a name="m91">выходным.<o:p></o:p></b></p>

<br
style='mso-ignore:vglayout' clear=ALL>
Таким образом, в Си возможны целых три способа передачи параметра: по значению,
по ссылке и с использованием явного указателя. Формальный параметр-ссылка
совпадает с формальным параметром-значением <b style='mso-bidi-font-weight:
normal'><a name="m92">по форме </b>(синтаксису использования), а с указателем - <b
style='mso-bidi-font-weight:normal'>по содержанию </b>(механизму реализации, вплоть
до совпадения программного кода).<p>&nbsp;</p>
</p>

<p class=a4 align=center style='text-align:center'>
<img border="0" src="Images/052-05.gif" width="566" height="111"></p>
<p class=a4 align=center style='text-align:center'>
<b style='mso-bidi-font-weight:
normal'><a name="m93">рис. 52-4. Передача параметров по значению, указателю и ссылке</b></p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//-----------------------------------------------------------------</p>

<p class=a0>// Формальный параметр - значение</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>inc</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>int</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>vv</span>){ <span lang=EN-US
style='mso-ansi-language:EN-US'>vv</span>++; }<span style='mso-tab-count:2'>                 </span>//
Передается значение - <b style='mso-bidi-font-weight:normal'><a name="m94">копия <span lang=EN-US style='mso-ansi-language:
EN-US'>nn</span><o:p></o:p></b></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void main(){ int
nn=5; inc(nn); }<span style='mso-tab-count:1'>    </span>// <b
style='mso-bidi-font-weight:normal'>nn=5<o:p></o:p></b></span></p>

<p class=a0>//-----------------------------------------------------------------</p>

<p class=a0>// Формальный параметр - указатель</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>inc</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>int</span> *<span lang=EN-US
style='mso-ansi-language:EN-US'>pv</span>) { (*<span lang=EN-US
style='mso-ansi-language:EN-US'>pv</span>)++; }<span style='mso-tab-count:2'>                      </span>//
Передается указатель - <b style='mso-bidi-font-weight:normal'><a name="m95">адрес <span lang=EN-US style='mso-ansi-language:
EN-US'>nn</span><o:p></o:p></b></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void main(){ int
nn=5; inc(&amp;nn); }<span style='mso-tab-count:1'>  </span>// <b
style='mso-bidi-font-weight:normal'>nn=6<o:p></o:p></b></span></p>

<p class=a0>//-----------------------------------------------------------------</p>

<p class=a0>// Формальный параметр - ссылка</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>inc</span>
(<span lang=EN-US style='mso-ansi-language:EN-US'>int</span> &amp;<span
lang=EN-US style='mso-ansi-language:EN-US'>vv</span>) { <span lang=EN-US
style='mso-ansi-language:EN-US'>vv</span>++; }<span style='mso-tab-count:2'>             </span>//
Передается указатель - <b style='mso-bidi-font-weight:normal'><a name="m96">синоним <span lang=EN-US style='mso-ansi-language:
EN-US'>nn</span><o:p></o:p></b></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void main(){ int
nn=5; inc(nn); }<span style='mso-tab-count:1'>    </span>// <b
style='mso-bidi-font-weight:normal'>nn=6<o:p></o:p></b></span></p>

<p class=a0><b style='mso-bidi-font-weight:normal'><a name="m97"><span lang=EN-US
style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></b></p>

<p class=a>В Си возможна также и передача ссылки в качестве результата функции.
Ее следует понимать как отображение (синоним) на переменную, которая
возвращается оператором <b style='mso-bidi-font-weight:normal'><a name="m98"><span
lang=EN-US style='mso-ansi-language:EN-US'>return</span>. </b>Требования к
объекту – источнику ссылки, на который она отображается, еще более строгие –
это либо глобальная переменная, либо формальный параметр функции, передаваемый
в нее по ссылке или по указателю. При обращении к результату функции – ссылке
производится действие с переменной-прототипом. Более подробно все нюансы и
примеры будут рассмотрены в<b style='mso-bidi-font-weight:normal'><a name="m99">10.2</b>. </p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------52-02.<span
lang=EN-US style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0>//----- Функция возвращает ссылку на минимальный элемент массива</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>int &amp;ref_min(int A[], int n){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (int i=0,k=0; i&lt;n; i++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>if (A[i]&lt;A[k]) k=i;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return A[k];}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main(){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int B[5]={4,8,2,6,4};<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>ref_min(B,5)++;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (int i=0; i&lt;5; i++) printf(&quot;%d
&quot;,B[i]); }<o:p></o:p></span></p>

<p class=a>Здесь «ссылка на ссылке ссылкой погоняет». Формальный параметр <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>A</span><span lang=EN-US> </span>– </b>массив, который передается по
ссылке и при вызове отображается на <b style='mso-bidi-font-weight:normal'><a name="m100"><span
lang=EN-US style='mso-ansi-language:EN-US'>B</span>. </b>Функция, возвращает
ссылку на минимальный элемент <b style='mso-bidi-font-weight:normal'><a name="m101"><span
lang=EN-US style='mso-ansi-language:EN-US'>A</span>[</b><b style='mso-bidi-font-weight:
normal'><a name="m102"><span lang=EN-US style='mso-ansi-language:EN-US'>k</span>], </b>тем
самым отображает свой результат на минимальный элемент массива. Кому надоело
«играть в прятки» с транслятором, может посмотреть программный эквивалент с
использованием обычных указателей.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------52-03.<span
lang=EN-US style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0>//----- Функция возвращает указатель на минимальный элемент массива</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>int *ptr_min(int *p, int n){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int *pmin;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (pmin=p; n&gt;0; p++,n--)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>if (*p &lt; *pmin) pmin=p;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return pmin;}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main(){</span></p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>int B[5]={4,8,2,6,4};<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>(*ptr_min(B,5))++;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (int i=0; i&lt;5; i++) printf(&quot;%d
&quot;,B[i]); }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<h3>Строки, массивы символов и указатель <span lang=EN-US style='mso-ansi-language:
EN-US'>char</span>*</h3>

<p class=a>Среди возможных интерпретаций указателя <b style='mso-bidi-font-weight:
normal'><a name="m103"><span lang=EN-US style='mso-ansi-language:EN-US'>char</span>* <span
style='mso-spacerun:yes'> </span></b>(указатель на отдельный символ, на байт,
массив байтов, массив целых (размерности байт)), можно выделить<span
style='mso-spacerun:yes'>  </span><b style='mso-bidi-font-weight:normal'><a name="m104">указатель
на строку</b>: массив, содержащий последовательность символов, ограниченную
символом ‘\0’. Цикл работы со строкой с использованием указателя обычно
включает линейное перемещение указателя с проверкой на символ конца строки под
указателем.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>int<span style='mso-tab-count:1'>         </span>strlen(char *p){<span
style='mso-tab-count:1; font-family:Courier New; mso-bidi-font-family:Times New Roman'>       </span>//
Возвращает длину строки, заданной</p>

<p class=a0>int<span style='mso-tab-count:1'>         </span>n;<span
style='mso-tab-count:3'>                                 </span>// указателем
на на строку char*</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for (n=0; *p !=
'\0'; p++, n++);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return n;}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void<span
style='mso-tab-count:1'>       </span>strcat(char *p, char *q){<span
style='mso-tab-count:1'>  </span>// </span>Объединяет<span style='mso-ansi-language:
EN-US'> </span>строки<span lang=EN-US style='mso-ansi-language:EN-US'>,<o:p></o:p></span></p>

<p class=a0>while (*p !='\0') p++;<span style='mso-tab-count:1'>        </span>
<span
style='mso-tab-count:1; font-family:Courier New; mso-bidi-font-family:Times New Roman'>      </span>// заданные указателями</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>while(*q !='\0') *p++
= *q++);<o:p></o:p></span></p>

<p class=a0>*<span lang=EN-US style='mso-ansi-language:EN-US'>p</span> = '\0';}</p>

<p class=a>При просмотре массива операции индексирования с линейно изменяющимся
индексом (<b style='mso-bidi-font-weight:normal'><a name="m105"><span lang=EN-US
style='mso-ansi-language:EN-US'>p</span>[</b><b style='mso-bidi-font-weight:
normal'><a name="m106"><span lang=EN-US style='mso-ansi-language:EN-US'>i</span>] </b>и <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>i</span>++</b>) заменены аналогичным линейным перемещением указателя - <b
style='mso-bidi-font-weight:normal'>*p++, </b>или <b style='mso-bidi-font-weight:
normal'><a name="m107">*</b><b style='mso-bidi-font-weight:normal'><a name="m108"><span lang=EN-US
style='mso-ansi-language:EN-US'>p</span>, </b><b style='mso-bidi-font-weight:
normal'><a name="m109"><span lang=EN-US style='mso-ansi-language:EN-US'>p</span>++</b>.<b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m110">Строковая константа</b> в
любом контексте интерпретируется как указатель на создаваемый транслятором
массив символов, инициализированный этой строкой. Трансляция строковой
константы включает в себя:</p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>создание массива символов с размерностью,
достаточной для размещения строки; </p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='mso-spacerun:yes'> </span>инициализацию
(заполнение) массива символами строки, дополненной символом '\0'; </p>

<p class=a1><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>включение в контекст программы, где присутствует
строковая константа, указателя на созданный массив символов. В программе ей
соответствует тип <b style='mso-bidi-font-weight:normal'><a name="m111">char*</b> - указатель
на строку. </p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>char *<span lang=EN-US style='mso-ansi-language:EN-US'>q</span> =
&quot;ABCD&quot;;;<span style='mso-tab-count:3'>                                </span>//
Программа<span style='mso-tab-count:3'>                            </span></p>

<p class=a0>char *q; <span style='mso-tab-count:3'>                                    </span><span
style='mso-tab-count:1'>            </span>// Эквивалент</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>char</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>A</span>[5]
= {'<span lang=EN-US style='mso-ansi-language:EN-US'>A</span>','<span
lang=EN-US style='mso-ansi-language:EN-US'>B</span>','<span lang=EN-US
style='mso-ansi-language:EN-US'>C</span>','<span lang=EN-US style='mso-ansi-language:
EN-US'>D</span>','\0'};</p>

<p class=a0>q = A;<span style='mso-tab-count:1'>   </span></p>

<span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman CYR";
mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:RU;mso-fareast-language:RU;mso-bidi-language:AR-SA'><br
clear=all style='page-break-before:always'>
</span>

<p class=a>В связи с этим в Си возможны довольно странные выражения с участием
строковых констант:</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>char c1 =
&quot;ABCD&quot;[3];<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>char c2 = (&quot;12345&quot;
+ 2)[1];<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for (char *q =
&quot;12345&quot;; *q !='\0'; q++);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>char</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>c</span>3=*(--<span
lang=EN-US style='mso-ansi-language:EN-US'>q</span>);<span lang=EN-US
style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m112">Указатель на строку, массив
символов, строковая константа. </b>Имя массива символов, строковая константа и
указатель на строку имеют в языке один и тот же тип <b style='mso-bidi-font-weight:
normal'><a name="m113">char*,</b> поэтому могут использоваться в одном и том же контексте,
например, в качестве фактических параметров функций: </p>

<p class=a0><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman CYR";mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>extern int
strcmp(char *, char*);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>char<span
style='mso-tab-count:1'>      </span>*p,A[20];<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>strcmp(A,&quot;1234&quot;);<o:p></o:p></span></p>

<p class=a0>strcmp(p,A+2);</p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m114">Результат функции - указатель
на строку. </b>Функция, возвращающая указатель, может «отметить» им место в
строке с интересующими вызывающую программу свойствами. При отсутствии
найденного элемента возвращается <b style='mso-bidi-font-weight:normal'><a name="m115"><span
lang=EN-US style='font-family:"Times New Roman";mso-ansi-language:EN-US'>NULL</span></b><span
style='font-family:"Times New Roman"'>. <o:p></o:p></span></p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m116">Индексация или перемещение
указателя.<span style='mso-spacerun:yes'>  </span></b>При работе с массивом
через указатель всегда существует альтернатива: использовать индексацию при
«неподвижном» указателе, либо перемещать указатель с помощью операций <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>p</span>++ </b>или присваивания указателя. Рекомендации – соображения
удобства. Единственный случай, если перемещение по массиву складывается из двух
составляющих, то избежать суммирования индексов, а также периодических
присваиваний<span style='mso-spacerun:yes'>  </span>указателей можно сочетанием
перемещения указателя и индексации.</p>

<p class=a>Посмотрим, как все вышесказанное выглядит на практике.</p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m117">Поиск всех вхождений
подстроки в строке.<span style='mso-spacerun:yes'>  </span></b>Для начала
разработаем функцию поиска подстроки в строке. Функция получает указатель на
начало строки, продвигает его к началу обнаруженного фрагмента и возвращает в
качестве результата. Внешний цикл, таким образом, предполагает простое
перемещение указателя <b style='mso-bidi-font-weight:normal'><a name="m118"><span lang=EN-US
style='mso-ansi-language:EN-US'>p</span><span lang=EN-US> </span></b>по строке.
В его теле для каждого текущего положения указателя <b style='mso-bidi-font-weight:
normal'><a name="m119"><span lang=EN-US style='mso-ansi-language:EN-US'>p</span><span
lang=EN-US> </span></b>производится проверка на обнаружение подстроки. Для
этого используется индексация относительно текущего положения указателя <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>p</span>[<span lang=EN-US
style='mso-ansi-language:EN-US'>i</span>], </b>тем более, что аналогичная
индексация используется и во второй строке для попарного сравнения символов.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------52-04.<span
lang=EN-US style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0>//---- Поиск в строке заданного фрагмента</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>char</span> *<span lang=EN-US style='mso-ansi-language:
EN-US'>find</span> (<span lang=EN-US style='mso-ansi-language:EN-US'>char</span>
*<span lang=EN-US style='mso-ansi-language:EN-US'>p</span>,<span lang=EN-US
style='mso-ansi-language:EN-US'>char</span> *<span lang=EN-US style='mso-ansi-language:
EN-US'>q</span>){<span style='mso-tab-count:2'>                    </span>//
Попарное сравнение</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>for</span> (; *<span lang=EN-US
style='mso-ansi-language:EN-US'>p</span>!='\0'; <span lang=EN-US
style='mso-ansi-language:EN-US'>p</span>++){<span style='mso-tab-count:2'>                    </span>
<span style='mso-tab-count:1'>           </span>// до обнаружения расхождения</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span
style='mso-spacerun:yes'>  </span><span lang=EN-US style='mso-ansi-language:
EN-US'>for ( int i=0 ; q[i]!='\0' &amp;&amp; q[i]==p[i]; i++);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>if</span> ( <span lang=EN-US style='mso-ansi-language:EN-US'>q</span>[<span
lang=EN-US style='mso-ansi-language:EN-US'>i</span>] == '\0') <span lang=EN-US
style='mso-ansi-language:EN-US'>return</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>p</span>;<span
style='mso-spacerun:yes'>  </span><span style='mso-tab-count:1'>           </span>//
Конец подстроки - успех</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span
style='mso-spacerun:yes'>  </span>}<span
style='mso-spacerun:yes'>                                      </span><span style='mso-tab-count:1'>       </span>//
иначе продолжить поиск</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>return</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>NULL</span>;}</p>

<p class=a4>Для обнаружения всех фрагментов достаточно передавать для каждого
последующего вызова функции указатель на часть строки, непосредственно
следующей за найденным фрагментом. </p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------52-05.<span
lang=EN-US style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0>//----- Поиск всех вхождений фрагмента в строке</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>void main()<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>{ char c[80]=&quot;find first abc and next abc
and last abc&quot;,*q=&quot;abc&quot;, *s;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (s=find(c,q); s!=NULL;
s=find(s+strlen(q),q)) puts(s);<o:p></o:p></span></p>

<p class=a0>
<span
style='mso-spacerun:yes; mso-ansi-language:EN-US' lang="EN-US"> </span>} </p>

<p class=a4>Получается итерационный цикл, в котором найденное значение на
текущем шаге становится началом поиска на следующем. В первый раз функция
вызывается с указателем на начало строки, а при повторении цикла - с указателем
на первый символ за фрагментом, найденном на текущем шаге - <b
style='mso-bidi-font-weight:normal'>s+strlen(q).</b></p>

<p class=a><b style='mso-bidi-font-weight:normal'><a name="m120">Сортировка слов в строке
(выбором). </b>Рассмотрим еще одни пример, использующий ту же технику
перемещения указателей по строке.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------52-06.<span
lang=EN-US style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0>//---- Поиск слова максимальной длины посимвольная обработка</p>

<p class=a0>// Функция возвращает указатель начала слова или <span lang=EN-US
style='mso-ansi-language:EN-US'>NULL</span>, если нет слов</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>char *find(char *s) {<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int n,lmax; char *pmax;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (n=0,lmax=0,pmax=NULL; *s!=0;s++){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>      </span>if</span> ( *<span lang=EN-US
style='mso-ansi-language:EN-US'>s</span>!=' ') <span lang=EN-US
style='mso-ansi-language:EN-US'>n</span>++;<span
style='mso-spacerun:yes'>          </span><span style='mso-tab-count:1'>           </span>//
символ слова увеличить счетчик</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span
style='mso-spacerun:yes'>   </span><span lang=EN-US style='mso-ansi-language:
EN-US'>else</span> {<span style='mso-spacerun:yes'>                     </span><span style='mso-tab-count:1'>    </span>//
перед сбросом счетчика</p>

<p class=a0><span style='mso-tab-count:2'>                        </span><span
lang=EN-US style='mso-ansi-language:EN-US'>if</span> (<span lang=EN-US
style='mso-ansi-language:EN-US'>n</span> &gt; <span lang=EN-US
style='mso-ansi-language:EN-US'>lmax</span>) { <span lang=EN-US
style='mso-ansi-language:EN-US'>lmax</span>=<span lang=EN-US style='mso-ansi-language:
EN-US'>n</span>; <span lang=EN-US style='mso-ansi-language:EN-US'>pmax</span>=<span
lang=EN-US style='mso-ansi-language:EN-US'>s</span>-<span lang=EN-US
style='mso-ansi-language:EN-US'>n</span>; }</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span
style='mso-spacerun:yes'>   </span><span lang=EN-US style='mso-ansi-language:
EN-US'>n</span>=0;<span style='mso-spacerun:yes'>                     </span><span
style='mso-tab-count:1'>      </span>// фиксация максимального значения</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span
style='mso-spacerun:yes'>   </span>}}<span
style='mso-spacerun:yes'>                     </span><span style='mso-tab-count:
1'>          </span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>if</span> (<span
lang=EN-US style='mso-ansi-language:EN-US'>n</span> &gt; <span lang=EN-US
style='mso-ansi-language:EN-US'>lmax</span>) <span lang=EN-US style='mso-ansi-language:
EN-US'>pmax</span>=<span lang=EN-US style='mso-ansi-language:EN-US'>s</span>-<span
lang=EN-US style='mso-ansi-language:EN-US'>n</span>; // то же самое для последнего слова</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>pmax</span>;
}</p>

<p class=a4>Для получения указателя на начало очередного слова используется
указатель текущего символа <b style='mso-bidi-font-weight:normal'><a name="m121"><span
lang=EN-US style='mso-ansi-language:EN-US'>s</span>. </b>В момент запоминания он
ссылается на первый символ после слова, поэтому по правилам адресной арифметики
он смещается назад на число символов <b style='mso-bidi-font-weight:normal'><a name="m122"><span
lang=EN-US style='mso-ansi-language:EN-US'>n</span>,

</b><a name="m122">равное длине слова.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------52-07.<span
lang=EN-US style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0>//---- Сортировка слов в строке в порядке убывания (выбором)</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>void sort(char *in, char *out)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>{ char * q;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>while((q=find(in))!= NULL</span>) { <span
style='mso-tab-count:1'>                    </span>//
Получить индекс очередного слова</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>for</span> (; *<span lang=EN-US
style='mso-ansi-language:EN-US'>q</span>!=' ' &amp;&amp; *<span lang=EN-US
style='mso-ansi-language:EN-US'>q</span>!=0; ) {</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span
style='mso-spacerun:yes'>   </span><span
style='mso-tab-count:1'>         </span>*<span lang=EN-US style='mso-ansi-language:
EN-US'>out</span> ++= *<span lang=EN-US style='mso-ansi-language:EN-US'>q</span>;
*<span lang=EN-US style='mso-ansi-language:EN-US'>q</span> ++=' ';<span
style='mso-spacerun:yes'>  </span><span style='mso-tab-count:1'>  </span>//
Переписать с затиранием</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span
style='mso-spacerun:yes'>   </span><span style='mso-tab-count:1'>         </span>}</p>

<p class=a0><span style='mso-spacerun:yes'>      </span><span style='mso-tab-count:
1'>      </span>*<span lang=EN-US style='mso-ansi-language:EN-US'>out</span>++='
';<span style='mso-spacerun:yes'>                       </span><span
style='mso-tab-count:1'>          </span>// После слова добавить пробел</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span style='mso-tab-count:
1'>           </span>}</p>

<p class=a0><span style='mso-spacerun:yes'> </span>*<span lang=EN-US
style='mso-ansi-language:EN-US'>out</span>=0;}</p>

<h3><a name="m132">Лабораторный практикум</a></h3>

<p class=a>Вариант задания реализовать в<span style='mso-spacerun:yes'> 
</span>виде<span style='mso-spacerun:yes'>  </span>функции,<span
style='mso-spacerun:yes'>  </span>использующей для работы со строкой<span
style='mso-spacerun:yes'>  </span>только<span style='mso-spacerun:yes'> 
</span>указатели<span style='mso-spacerun:yes'>  </span>и<span
style='mso-spacerun:yes'>  </span>операции<span style='mso-spacerun:yes'> 
</span>над ним вида </a><a name="m123"> <b style='mso-bidi-font-weight:normal'>*p++, <span
style='mso-spacerun:yes'> </span>p++, <span
lang=EN-US style='mso-ansi-language:EN-US'>p</span>[</b><b style='mso-bidi-font-weight:
normal'><a name="m124"><span lang=EN-US style='mso-ansi-language:EN-US'>i</span>]</b> и т.д..
Если функция<span style='mso-spacerun:yes'>  </span>возвращает<span
style='mso-spacerun:yes'>  </span>строку<span style='mso-spacerun:yes'> 
</span>или<span style='mso-spacerun:yes'>  </span>ее фрагмент, то это также
необходимо сделать через<span style='mso-spacerun:yes'>  </span>указатель.</p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Times New Roman'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>
<![endif]>Функция
находит минимальный элемент массива и возвращает указатель на него. С использованием
этой функции реализовать сортировку выбором.<span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Шейкер-сортировка с использованием указателей на
правую и левую границы отсортированного массива и сравнения указателей.</p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Функция находит в строке пары одинаковых
фрагментов и возвращает указатель на первый. С помощью функции найти все пары
одинаковых фрагментов.</p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Функция находит в строке пары инвертированных
фрагментов (например &quot;123apr&quot; и &quot;rpa321&quot;) и возвращает
указатель на первый. С помощью функции найти все пары.</p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Функция производит двоичный поиск места размещения
нового элемента в упорядоченном массиве и возвращает указатель на место
включения нового элемента. С помощью функции реализовать сортировку вставками.</p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Times New Roman'>6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>
<![endif]>Функция
находит в строке десятичные константы и заменяет их на шестнадцатеричные с тем
же значением, например &quot;aaaaa258xxx&quot;<span style='mso-spacerun:yes'>  
</span>на &quot;aaaaa0x102xxx&quot;.<span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Times New Roman'>7.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>
<![endif]>Функция
находит в строке символьные константы<span style='mso-spacerun:yes'>  </span>и
заменяет их на десятичные коды, например &quot;aaa'6'xxx&quot;<span
style='mso-spacerun:yes'>  </span>на &quot;aaa54xxx&quot;.<span
style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>8.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Функция находит в строке самое длинное слово и
возвращает указатель на него. С ее помощью реализовать размещение слов в
выходной строке в порядке убывания их длины.</p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>9.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Функция находит в строке самое первое (по
алфавиту) слово. С ее помощью реализовать размещение слов в выходной строке в
алфавитном порядке.</p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>10.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span>
<![endif]>Функция
находит в строке симметричный фрагмент вида &quot;<span lang=EN-US
style='font-family:"Times New Roman";mso-ansi-language:EN-US'>abcdcba</span>&quot;<span
style='font-family:"Times New Roman"'> </span>длиной 7 и более<span
style='mso-spacerun:yes'>  </span>символов (не содержащий пробелов) и
возвращает указатель на его начало и длину. С использованием функции
«вычеркнуть» все симметричные фрагменты из строки.</p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>11.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span>
<![endif]><span style='mso-spacerun:yes; font-family:Times New Roman'> </span>«Быстрая»
сортировка (разделением) с использованием указателей на правую и левую границы
массива, текущих указателей на правый и левый элемент и операции сравнения
указателей (см. <b style='mso-bidi-font-weight:normal'><a name="m125">7.2</b>).</p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>12.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span>
<![endif]>Найти
в строке последовательности, состоящие из одного повторяющегося символа и
заменить его на число символов и один символ (например &quot;<span lang=EN-US
style='font-family:"Times New Roman";mso-ansi-language:EN-US'>aaaaaa</span>&quot;<span
style='font-family:"Times New Roman"'> - </span>&quot;<span style='font-family:
"Times New Roman"'>5</span><span lang=EN-US style='font-family:"Times New Roman";
mso-ansi-language:EN-US'>a</span>&quot;)<span style='font-family:"Times New Roman"'>.</span></p>

<p class=a1 style='margin-left:21.3pt;mso-list:l1 level1 lfo3;tab-stops:21.3pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>13.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span>
<![endif]>Функция
создает копию строки и &quot;переворачивает&quot; в строке все слова. (Например<span
style='font-family:"Times New Roman"'>: </span>&quot;Жили были дед и баба&quot;
- &quot;илиЖ илиб дед и абаб&quot;). </p>

<h3>Вопросы без ответов</h3>

<p class=a>Определите, используется ли указатель для доступа к отдельной
переменной или к массиву. Напишите вызов функции с соответствующими
фактическими параметрами – адресами переменных или именами массивов.</p>

<p class=a4><b style='mso-bidi-font-weight:normal'><a name="m126">Пример оформления тестового
задания.<o:p></o:p></b></p>

<p class=a0>//------------------------------------------------------52-08.cpp</p>

<p class=a0>//-------------------------------------------------------</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>void F(int *p, int *q, int n){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (*q = 0; n &gt; 0; n--)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>      </span>* q = *q + *p++; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main(){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int x,A[5]={1,3,7,1,2};<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>F(A,&amp;x,5); printf(&quot;x=%d\n&quot;,x);
}<span style='mso-spacerun:yes'>              </span>// </span>Выведет<span
lang=EN-US style='mso-ansi-language:EN-US'> 13<o:p></o:p></span></p>

<p class=a>Формальный параметр <b style='mso-bidi-font-weight:normal'><a name="m127"><span
lang=EN-US style='mso-ansi-language:EN-US'>p</span><span lang=EN-US> </span></b>используется
в контексте <b style='mso-bidi-font-weight:normal'><a name="m128">*</b><b style='mso-bidi-font-weight:
normal'><a name="m129"><span lang=EN-US style='mso-ansi-language:EN-US'>p</span>++</b>, что
означает работу с последовательностью переменных, то есть с массивом. Число
повторений цикла определяется параметром <b style='mso-bidi-font-weight:normal'><a name="m130"><span
lang=EN-US style='mso-ansi-language:EN-US'>n</span></b>, соответствующим
размерности массива. Указатель <b style='mso-bidi-font-weight:normal'><a name="m131"><span
lang=EN-US style='mso-ansi-language:EN-US'>q</span><span lang=EN-US> </span></b>используется
для косвенного обращения через него к отдельной переменной. Поэтому при вызове
функции фактическими параметрами являются: имя массива – указатель на начало,
адрес переменной – указатель на нее и константа – размерность массива,
передаваемая по значению.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>//-----------------------------------------------------------52-</span>09</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>//-----------------------------------------------------------1<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int F1(char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (int nc=0;*c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c!=' ' &amp;&amp; (c[1]==' ' ||
c[1]==0)) <st1:place w:st="on"><st1:State w:st="on">nc++</st1:State></st1:place>;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return nc;}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------2<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int F2(char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int nc; char *p;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (nc=0,p=c; *c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c!=' ' &amp;&amp; (p==c ||
c[-1]==' ')) <st1:place w:st="on"><st1:State w:st="on">nc++</st1:State></st1:place>;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return nc;}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------3<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F3(char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>while (*c!=0) c++;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>*c++='*'; *c=0; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//----------------------------------- -----------------------4<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F4(char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (;*c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c==' ' &amp;&amp; c[1]==' '){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>for (char
*p=c;*p!=0;p++) *p=p[1];<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>c--;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>}}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------5<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F5(char *c, char *out){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (; *c!=0; c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c!=' '){ <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>*out++=*c;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>if (c[1]==' ') *out++='
';<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>} <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>*out=' ';}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------6<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F6(char *c, char *out){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (;*c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (!(*c==' ' &amp;&amp; c[1]==' '))
*out++=*c;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>*out=0 ;} <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------7<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int F7(char *c){ <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (int nc=0; *c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c&gt;='0' &amp;&amp;
*c&lt;='9') <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>nc=<st1:place w:st="on"><st1:State
 w:st="on">nc+</st1:State></st1:place>*c-'0';<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return nc;}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------8<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F8(char *p,int B[]){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int nc; char *c;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for ( nc=0,c=p;*c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c!=' ' &amp;&amp; (c==p ||
c[-1]==' ')) <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>B[<st1:place w:st="on"><st1:State
 w:st="on">nc++</st1:State></st1:place>]=c-p; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------9<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F9(char *c, char *out){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (char *p=c; *c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c!=' ' &amp;&amp; (c[1]==' ' ||
c[1]==0)){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>for (char *q=c; q&gt;=p
&amp;&amp; *q!=' '; q-- )<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:3'>                                    </span>*out++=*q;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>*out++=' ';<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>*out=0; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------10<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int F10(char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (;*c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c&gt;='0' &amp;&amp; *c&lt;='9
') break;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (int s=0;*c&gt;='0' &amp;&amp;
*c&lt;='9';c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>s=s*10+*c-'0';<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return s; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------11<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>char *F11(char *c, int &amp;m){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>char *b=NULL;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (m=0;*c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c==c[1]){ <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>for (int
k=2;*c==c[k];k++);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>if (k&gt;m) m=k,b=c;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return b; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//----------- ------------------------------------------------12<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>char *F12(char *c, int &amp;m){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>char *b=NULL;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int k=0;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (;*c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c!=' ') k++;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>else{ <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>if (k!=0 &amp;&amp;
k&gt;m) m=k,b=c-k;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>k=0;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return b; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------13<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>char *F13(char *c, int &amp;m){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>char *b=NULL;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (int k=0;*c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c!=' '){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>for (k=1;c[k]!=' '
&amp;&amp; c[k]!=0;k++);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>if (k&gt;m) m=k,b=c;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>c+=k-1;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return b; <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//----------------------
-------------------------------------14<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int F14(char *c){ <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int s;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (;*c!=0;c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c&gt;='0' &amp;&amp; *c&lt;='9'
|| *c&gt;='A' &amp;&amp; *c&lt;='F') break;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (s=0;*c&gt;='0' &amp;&amp; *c&lt;='9' ||
*c&gt;='A' &amp;&amp; *c&lt;='F';c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c&gt;='0' &amp;&amp;
*c&lt;='9')<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>s=s*16+*c-'0';<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>else<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>s=s*16+*c-'A'+10;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return s;}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------15<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F15(char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (char *p=c; *p !='\0'; p++);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (p--; p&gt;c; p--,c++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>{ char s; s=*p; *p=*c; *c=s; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-------------------------------------------------
----------16<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int F16(char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (int old=0, nw=0; *c !='\0'; c++){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*c==' ') old = 0;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>else { if (old==0) nw++; old=1; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return nw; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------17<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F17(int a,char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (int mm=a; mm !=0; mm /=10 ,c++);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (mm=a, *c--='\0'; mm!=0; c--,mm=mm/10)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>*c= mm % 10 + '0'; <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------
-----18<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F18(int a,char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (int mm=a; mm !=0; mm /=16 ,c++);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (mm=a, *c--='\0'; mm!=0; c--,mm=mm /16)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>{<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>int v=mm % 16;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (v &lt;=9) *c = v + '0';<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>else *c = v - 10 + 'A'; <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>}}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------19<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int F19(char *p){ <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>char *c; int ns;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (c=p,ns=0; *c !='\0'; c++) {<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>for (int k=0; c-k &gt;=p &amp;&amp;
c[k] !='\0'; k++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>if (c[-k] != c[k])
break;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (k &gt;=3) ns++;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>} <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return ns; } <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------20<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>char *F20(char *c1, char *c2){ <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (; *c1 !='\0'; c1++) {<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>for (int j=0; c1[j]==c2 [j]; j++);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (c2[j]=='\0') return c1;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return NULL;}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------21<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>char *F21(char *c, int &amp;s){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int n; char *z,*p;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (; *c!=0; c++){ <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>for (p=c,n=0; *p !='\0'; p++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>if (*p==*c) n++;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (n &gt; s) { z=c ; s=n; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return z;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------22<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F22(double x, char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>x-=(int)x;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int i;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (*c++='.', i=1; i&lt; 6; i++) {<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>x *= 10.; *c++=(int)x + '0'; x -=
(int)x; <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>*c='\0';}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------23<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F23(char *c){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int cm=0;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (char *p=c; *c !='\0'; c++) {<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (c[0]=='*' &amp;&amp; c[1]=='/')
{ cm--, c++; continue; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (c[0]=='/' &amp;&amp; c[1]=='*')
{ cm++, c++; continue; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (cm==0) *p++ = *c;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>*p=0; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------24<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int *F24(int *p, int *q){ return *p &gt; *q ?
p : q; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------25<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F25(int *p1, int *p2) <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>{ int c; c = *p1; *p1 = *p2; *p2 =
c; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------26<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void F26(int *p, int *q, int n){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (*q = *p; n &gt; 0; n--, p++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*p &gt; *q) *q = *p; <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------27<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int *F27(int *p, int n)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>{ int *q;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>for (q = p; n &gt; 0; n--, p++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (*p &gt; *q) q = p;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return q; }</span></p>

<p class=a>Определите, каким образом программа передает параметры (по значению
или по ссылке) и как это влияет на результат.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------28</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>int inc1( int vv) { vv++; return vv; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main1(){ int a,b=5; a=inc1(b); }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------
---------------------------------------- 29<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int inc2( int &amp;vv) { vv++; return vv; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main2(){ int a,b=5; a=inc2(b); }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------
30<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int inc3( int &amp;vv) { vv++; return vv; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main3(){ int a,b=5; a=inc3(+ +b); }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------
31<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int &amp;inc4( int &amp;vv) { vv++; return vv;
}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main4(){ int a,b=5; a=inc4(b); }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------
32<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int inc5(int &amp;x) { x++; return x+1; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main5 ()<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>{ int x,y,z; x = 5; y = inc5(x); z=inc5(x);
z=inc5(z); }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//-----------------------------------------------------------
33<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int &amp;inc6(int &amp;x){ x++; return x; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main6 ()<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>{ int x,y,z; x = 5; y = inc6(x); z = inc6(inc6(x));
}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//----------------------------
-------------------------------34<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int inc7(int x) { x++; return x+1; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main7 () { int x,y,z; x = 5; y=inc7(x);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>z = inc7(inc7(x)); }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------
35<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int &amp;F38(int &amp;n1, int &amp;n2){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return n1 &gt; n2 ? n1 : n2; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main8(){ int x=5,y=6,z; z=F38(x,y);
F38(x,y)++; } <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>//------------------------------------------------------------
36<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>int &amp;F39(int &amp;n1, int &amp;n2){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>return n1 &gt; n2 ? n1 : n2; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>void main10(){ int x=5,y=6,z; F39(x,y)=0;
F39(x,y)++; } <o:p></o:p></span></p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
