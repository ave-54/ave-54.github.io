<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=Edit-Time-Data href="081.files/editdata.mso">
<title>Романов Е.Л. Беседы о программировании</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Comp</o:Author>
  <o:Template>Книга.dot</o:Template>
  <o:LastAuthor>www.PHILka.RU</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>430</o:TotalTime>
  <o:Created>2008-02-12T20:57:00Z</o:Created>
  <o:LastSaved>2008-02-12T20:57:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>2192</o:Words>
  <o:Characters>12500</o:Characters>
  <o:Company>NSTU_VT</o:Company>
  <o:Bytes>11776</o:Bytes>
  <o:Lines>104</o:Lines>
  <o:Paragraphs>29</o:Paragraphs>
  <o:CharactersWithSpaces>14663</o:CharactersWithSpaces>
  <o:Version>11.6360</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DoNotHyphenateCaps/>
  <w:DrawingGridHorizontalSpacing>0,55 пт</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>0,55 пт</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DrawingGridVerticalOrigin>99,25 пт</w:DrawingGridVerticalOrigin>
  <w:Compatibility>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
   <w:UseWord97LineBreakingRules/>
   <w:SelectEntireFieldWithStartOrEnd/>
   <w:UseWord2002TableStyleRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:"Times New Roman CYR";
	panose-1:2 2 6 3 5 4 5 2 3 4;
	mso-font-charset:204;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
@font-face
	{font-family:"Arial CYR";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:204;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
@font-face
	{font-family:"Arial Narrow";
	panose-1:2 11 5 6 2 2 2 3 2 4;
	mso-font-charset:204;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
h1
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:14.0pt;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h3
	{mso-style-link:"Заголовок 3 Знак";
	mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	font-weight:normal;}
h4
	{mso-style-next:Обычный;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-ansi-language:EN-US;}
h5
	{mso-style-next:Обычный;
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-ansi-language:EN-US;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
p.a, li.a, div.a
	{mso-style-name:текст;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.0pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a0, li.a0, div.a0
	{mso-style-name:программа;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a1, li.a1, div.a1
	{mso-style-name:список;
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:18.45pt;
	margin-bottom:0cm;
	margin-left:35.45pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	tab-stops:42.55pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a2, li.a2, div.a2
	{mso-style-name:определение;
	mso-style-parent:текст;
	margin-top:12.0pt;
	margin-right:32.9pt;
	margin-bottom:12.0pt;
	margin-left:35.45pt;
	text-align:justify;
	text-indent:.55pt;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-alt:solid windowtext 1.5pt;
	padding:0cm;
	mso-padding-alt:1.0pt 1.0pt 1.0pt 1.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a3, li.a3, div.a3
	{mso-style-name:эпиграф;
	margin-top:12.0pt;
	margin-right:32.9pt;
	margin-bottom:12.0pt;
	margin-left:5.0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-style:italic;
	mso-bidi-font-style:normal;}
p.a4, li.a4, div.a4
	{mso-style-name:"от края";
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a5, li.a5, div.a5
	{mso-style-name:Формула;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	layout-grid-mode:line;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.a6, li.a6, div.a6
	{mso-style-name:"без формата";
	mso-style-parent:программа;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.3
	{mso-style-name:"Заголовок 3 Знак";
	mso-style-locked:yes;
	mso-style-link:"Заголовок 3";
	mso-ansi-font-size:12.0pt;
	font-family:"Arial CYR";
	mso-ascii-font-family:"Arial CYR";
	mso-hansi-font-family:"Arial CYR";
	mso-ansi-language:RU;
	mso-fareast-language:RU;
	mso-bidi-language:AR-SA;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("081.files/header.htm") fs;
	mso-footnote-continuation-separator:url("081.files/header.htm") fcs;
	mso-endnote-separator:url("081.files/header.htm") es;
	mso-endnote-continuation-separator:url("081.files/header.htm") ecs;}
@page Section1
	{size:21.0cm 842.0pt;
	margin:33.45pt 42.55pt 72.0pt 89.85pt;
	mso-header-margin:14.2pt;
	mso-footer-margin:31.75pt;
	mso-header:url("081.files/header.htm") h1;
	mso-even-footer:url("081.files/header.htm") ef1;
	mso-footer:url("081.files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:77945188;
	mso-list-type:hybrid;
	mso-list-template-ids:-827664056 -2071412966 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l0:level1
	{mso-level-start-at:8;
	mso-level-text:%1;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1
	{mso-list-id:111748343;
	mso-list-type:hybrid;
	mso-list-template-ids:1698987124 -2113098950 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l1:level1
	{mso-level-start-at:12;
	mso-level-text:%1;
	mso-level-tab-stop:159.6pt;
	mso-level-number-position:left;
	margin-left:159.6pt;
	text-indent:-18.0pt;}
@list l2
	{mso-list-id:371812094;
	mso-list-type:hybrid;
	mso-list-template-ids:-298818442 -798984900 68747267 68747269 68747265 68747267 68747269 68747265 68747267 68747269;}
@list l2:level1
	{mso-level-start-at:9;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
@list l3
	{mso-list-id:517357751;
	mso-list-type:hybrid;
	mso-list-template-ids:-780488968 344367286 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l3:level1
	{mso-level-start-at:42;
	mso-level-text:%1;
	mso-level-tab-stop:159.6pt;
	mso-level-number-position:left;
	margin-left:159.6pt;
	text-indent:-18.0pt;}
@list l4
	{mso-list-id:609823021;
	mso-list-type:hybrid;
	mso-list-template-ids:-1684117832 1246773214 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l4:level1
	{mso-level-start-at:3;
	mso-level-text:%1;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-style:normal;}
@list l4:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l5
	{mso-list-id:682636648;
	mso-list-type:hybrid;
	mso-list-template-ids:-852318486 1647877064 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l5:level1
	{mso-level-start-at:12;
	mso-level-text:%1;
	mso-level-tab-stop:318.6pt;
	mso-level-number-position:left;
	margin-left:318.6pt;
	text-indent:-177.0pt;}
@list l6
	{mso-list-id:1027485245;
	mso-list-type:hybrid;
	mso-list-template-ids:270539844 -798984900 68747267 68747269 68747265 68747267 68747269 68747265 68747267 68747269;}
@list l6:level1
	{mso-level-start-at:9;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:88.9pt;
	mso-level-number-position:left;
	margin-left:88.9pt;
	text-indent:-18.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
@list l7
	{mso-list-id:1133984564;
	mso-list-type:hybrid;
	mso-list-template-ids:-1586203394 -665312716 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l7:level1
	{mso-level-start-at:12;
	mso-level-text:%1;
	mso-level-tab-stop:250.2pt;
	mso-level-number-position:left;
	margin-left:250.2pt;
	text-indent:-141.0pt;}
@list l8
	{mso-list-id:1574268910;
	mso-list-type:hybrid;
	mso-list-template-ids:-754653212 -1936657838 68747267 68747269 68747265 68747267 68747269 68747265 68747267 68747269;}
@list l8:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";}
@list l9
	{mso-list-id:1669164620;
	mso-list-type:hybrid;
	mso-list-template-ids:-300668598 114878812 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l9:level1
	{mso-level-start-at:12;
	mso-level-text:%1;
	mso-level-tab-stop:353.7pt;
	mso-level-number-position:left;
	margin-left:353.7pt;
	text-indent:-247.5pt;}
@list l10
	{mso-list-id:1714651029;
	mso-list-type:hybrid;
	mso-list-template-ids:-1545187080 -798984900 68747267 68747269 68747265 68747267 68747269 68747265 68747267 68747269;}
@list l10:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
@list l11
	{mso-list-id:1731735085;
	mso-list-type:hybrid;
	mso-list-template-ids:577033638 -1808759424 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l11:level1
	{mso-level-text:%1;
	mso-level-tab-stop:53.25pt;
	mso-level-number-position:left;
	margin-left:53.25pt;
	text-indent:-35.25pt;
	font-family:"Times New Roman";}
@list l11:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l12
	{mso-list-id:1793815671;
	mso-list-type:hybrid;
	mso-list-template-ids:1915898340 926160618 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l12:level1
	{mso-level-start-at:2;
	mso-level-text:%1;
	mso-level-tab-stop:53.25pt;
	mso-level-number-position:left;
	margin-left:53.25pt;
	text-indent:-35.25pt;}
@list l13
	{mso-list-id:1946381470;
	mso-list-type:hybrid;
	mso-list-template-ids:-505747168 -1937573454 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l13:level1
	{mso-level-start-at:12;
	mso-level-text:%1;
	mso-level-tab-stop:159.6pt;
	mso-level-number-position:left;
	margin-left:159.6pt;
	text-indent:-18.0pt;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Обычная таблица";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
  <o:regrouptable v:ext="edit">
   <o:entry new="1" old="0"/>
   <o:entry new="2" old="0"/>
   <o:entry new="3" old="0"/>
   <o:entry new="4" old="0"/>
   <o:entry new="5" old="0"/>
   <o:entry new="6" old="0"/>
   <o:entry new="7" old="0"/>
   <o:entry new="8" old="0"/>
   <o:entry new="9" old="0"/>
   <o:entry new="10" old="0"/>
   <o:entry new="11" old="0"/>
   <o:entry new="12" old="0"/>
   <o:entry new="13" old="0"/>
   <o:entry new="14" old="0"/>
   <o:entry new="15" old="0"/>
   <o:entry new="16" old="0"/>
   <o:entry new="17" old="0"/>
   <o:entry new="18" old="0"/>
   <o:entry new="19" old="11"/>
   <o:entry new="20" old="11"/>
   <o:entry new="21" old="0"/>
   <o:entry new="22" old="0"/>
   <o:entry new="23" old="0"/>
   <o:entry new="24" old="0"/>
   <o:entry new="25" old="0"/>
   <o:entry new="26" old="25"/>
   <o:entry new="27" old="0"/>
   <o:entry new="28" old="0"/>
  </o:regrouptable>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=RU style='tab-interval:36.0pt' background="back.gif">

<div class=Section1>

<h1><span
style='layout-grid-mode:line'><font face="Arial"><span lang="en-us">8</span>. Нелинейные структуры данных. Деревья и графы</font><o:p></o:p></span></h1>

<p class=a>Рассмотренные ранее структуры данных (массивы, массивы указателей и
списки) имеют линейную структуру, единственный порядок обхода, который и
определяет порядок следования (перечисления, логической нумерации) элементов.
Деревья и графы, наоборот, представляют собой структуры, которые не допускают
подобной «линеаризации»: их невозможно «вытянуть в линию» и для их изображения
необходима плоскость. С точки зрения организации данных это дает разнообразие
вариантов размещения одного и того же набора данных, <span
style='mso-spacerun:yes'> </span>а также различные варианты обхода одной и той
же структуры.</p>

<h2><font face="Arial"><span lang="en-us">8</span><span
style='layout-grid-mode:line'>.1. Деревья и рекурсивные алгоритмы</span></font><span
lang=EN-US style='mso-ansi-language:EN-US;layout-grid-mode:line'><o:p></o:p></span></h2>

<p class=a4><font face="Arial"><span class=3><span style='mso-bidi-font-family:"Times New Roman"'>Определение
дерева. Дерево и рекурсия</span></span></font><b><a name="m1"><o:p></o:p></b></p>

<p class=a4>Определение
дерева имеет рекурсивную природу. Элемент этой структуры данных называется <b><a name="m2">вершиной</b>.
Дерево представляет собой вершину, имеющую ограниченное число связей (<b><a name="m3">ветвей</b>)
к другим деревьям. Нижележащие деревья для текущей вершины называются <b><a name="m4">поддеревьями</b>,
а их головные вершины - <b><a name="m5">потомками</b>. По отношению к потомкам текущая
вершина называется <b><a name="m6">предком</b>. Вершины, не имеющие потомков, называются
оконечными или <b><a name="m7">терминальными, </b>головная вершина всего дерева называется <b><a name="m8">корневой</b>.</p>

<p class=a>Рекурсивное определение дерева ведет к тому, что алгоритмы работы с
ним тоже являются рекурсивными. На самом деле возможны и циклические алгоритмы,
но они являются следствием линейной рекурсии, основанной на выборе. На самом
первом шаге определим общий вид алгоритма <b><a name="m9">полного рекурсивного обхода
дерева, </b>который не зависит от формы представления дерева. Идея его заключается<span
style='mso-spacerun:yes'>  </span>в том, что любое действие, выполняемое над
вершиной, должно быть выполнено также и по отношению ко всем его поддеревьям, а
значит, алгоритм должен быть рекурсивно выполнен по отношению ко всем потомкам
этой вершины. В качестве параметра обязателен идентификатор<span
style='mso-spacerun:yes'>  </span>текущей вершины (индекс, указатель, ссылка).</p>

<p class=a0><img border="0" src="Images/081-02.jpg" width="314" height="195"></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>ScanTree</span>(
текущая вершина){</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>if (</span>текущая<span
style='mso-ansi-language:EN-US'> </span>вершина<span lang=EN-US
style='mso-ansi-language:EN-US'>==NULL) return;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for</span>(
перебор потомков) <span lang=EN-US style='mso-ansi-language:EN-US'>ScanTree</span>(
<span lang=EN-US style='mso-ansi-language:EN-US'>i</span>-ый потомок)</p>

<p class=a0>}</p>

<p class=a>Когда речь идет о древовидных структурах, следует отличать их
абстрактное определение от конкретного способа их реализации в памяти.
Последнее зависит также от вида алгоритмов, работающих с деревом:</p>

<p class=a1>- если используется рекурсивный или циклический алгоритм,
начинающий работать с корневой вершины дерева, то необходимы только прямые ссылки
от предка к потомкам;</p>

<p class=a1>- если алгоритм предполагает навигацию по дереву во всех
направлениях, как вверх, так и вниз по дереву (например, в древовидной системе
каталогов), то предполагается наличие как прямых, так и обратных ссылок от
потомков к предкам (в системе каталогов – ссылка на родительский каталог);</p>

<p class=a1>- возможны алгоритмы, которые работают с деревом, начиная с
терминальных вершин. Тогда кроме ссылок от потомков к предкам необходима еще
структура данных, объединяющая терминальные вершины (например, массив
указателей).</p>

<h3>Способы представления деревьев</h3>

<p class=a>До сих пор мы говорили о деревьях абстрактно, как о логической
структуре. А теперь спустимся на грешную землю и обсудим варианты его
физического размещения. Составными частями физического представления дерева
могут быть массивы, списки, массивы указателей. Начнем с самого простого.</p>

<p class=a4><b><a name="m10">Представление дерева в виде массива с индексами предков. </b><span
style='mso-bidi-font-weight:bold'>Поскольку у каждого потомка один единственный
предок, то, разместив вершины в массиве, можно в каждую из них поместить индекс
предка. <o:p></o:p></span></p>

<p class=a4><b><a name="m11"><o:p>&nbsp;<img border="0" src="Images/081-03.gif" width="438" height="272"></o:p></b></p>

<p class=a4><b><a name="m12"><o:p></o:p></b></p>

<p class=a4 align=center style='text-align:center'><b><a name="m13">рис. <span
lang=EN-US style='mso-ansi-language:EN-US'>8</span>1.<span lang=EN-US
style='mso-ansi-language:EN-US'>1</span>. Дерево в массиве с индексами предков<o:p></o:p></b></p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------91-01.cpp</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>struct mtree{<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>char *s;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>int parent;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>};<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>mtree A1[]={<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>{&quot;aa&quot;,-1},
{&quot;bb&quot;,0}, {&quot;cc&quot;,1}, {&quot;dd&quot;,0}, {&quot;ee&quot;,8},
{&quot;ff&quot;,1}, {&quot;gg&quot;,3}, {&quot;hh&quot;,5}, {&quot;ii&quot;,3},
{&quot;jj&quot;,7}, {&quot;kk&quot;,7}};<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void scan_m(mtree
A[], int n, int k, int level){<span style='mso-tab-count:1'>                    </span>// k – индекс </span>предка<span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>printf(&quot;l=%d node=%d
s=%s\n&quot;,level,k,A[k].s);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>for</span> (<span lang=EN-US
style='mso-ansi-language:EN-US'>int</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>i</span>=0;<span lang=EN-US
style='mso-ansi-language:EN-US'>i</span>&lt;<span lang=EN-US style='mso-ansi-language:
EN-US'>n</span>;<span lang=EN-US style='mso-ansi-language:EN-US'>i</span>++)<span
style='mso-tab-count:4'>                                             </span>//
Цикл выбора потомков вершины</p>

<p class=a0><span style='mso-tab-count:2'>                        </span><span
lang=EN-US style='mso-ansi-language:EN-US'>if (A[i].parent==k)
scan_m(A,n,i,level+1);}</span></p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void main(){ scan_m(A1,11,0,0);
}<o:p></o:p></span></p>

<p class=a>Но это не слишком эффективный способ. Ведь в рекурсивном алгоритме для
каждой вершины делается цикл по всему массиву в поисках потомков.<span
style='mso-bidi-font-weight:bold'> Действительно, трудоемкость алгоритма
получается <b><a name="m14">T=N*N</b> или <b><a name="m15">N</b></span><b><a name="m16"><sup><span style='font-size:14.0pt'>2</span></sup></b><span
style='font-size:14.0pt;mso-bidi-font-weight:bold'>. </span><span
style='mso-bidi-font-size:12.0pt;mso-bidi-font-weight:bold'>Все-таки этому
способу можно найти применение, например, если алгоритмы используют просмотр от
потомков к предкам. Или, например, в таблицах баз данных, где имеются
внутренние эффективные механизмы селекции данных.<o:p></o:p></span></p>

<p class=a4><b><a name="m17"><span
style='mso-bidi-font-size:12.0pt'>Представление дерева в массиве с вычисляемыми
адресами потомков. </span></b><span style='mso-bidi-font-size:12.0pt;
mso-bidi-font-weight:bold'>Попробуем поставить вопрос нестандартно: если не
искать, как было сделано выше, потомков, то, может быть, их адреса (или
индексы) можно вычислить? Для некоторого вида деревьев, как например, с двумя
потомками, принять способ размещения, в котором адреса (индексы) потомков
вычисляются через адрес (индекс) предка. Если предок имеет индекс <b><a name="m18">n, </b>то
два его потомка -<span style='mso-spacerun:yes'>  </span><b><a name="m19">2n</b> и <b><a name="m20">2n+1 </b>соответственно.
Корневая вершина имеет индекс 1. Отсутствующие потомки должны обозначаться
специальным значением, например, -1.<o:p></o:p></span></p>

<p class=a4 align=center style='text-align:center'>
<img border="0" src="Images/081-04.gif" width="585" height="260"></p>
<p class=a4 align=center style='text-align:center'><b><a name="m21">рис. 81.2. Дерево в
массиве с вычислением адресов потомков<o:p></o:p></b></p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------91-01.<span
lang=EN-US style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>scan</span>_2(<span
lang=EN-US style='mso-ansi-language:EN-US'>int A[], int n, int k,int level){<span
style='mso-tab-count:1'>   </span>// k – индекс </span>текущей<span
style='mso-ansi-language:EN-US'> </span>вершины<span lang=EN-US
style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (k&gt;=n) return;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (A[k]==-1) return;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>printf(&quot;l=%d node=%d
val=%d\n&quot;,level,k,A[k]);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>scan_2(A,n,2*k,level+1);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>scan_2(A,n,2*k+1,level+1);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>//<span
style='mso-spacerun:yes'>              </span>0 1 <span style='mso-spacerun:yes'>  </span>2
3 <span style='mso-spacerun:yes'> </span>4 <span
style='mso-spacerun:yes'>  </span>5 6 7 <span
style='mso-spacerun:yes'> </span>8<span style='mso-spacerun:yes'>  </span>9 <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int
A2[]={-1,2,10,3,15,-1,4,8,-1,17};<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void main(){
scan_2(A2,10,1,0);<span style='mso-spacerun:yes'>  </span>}<o:p></o:p></span></p>

<p class=a>Получается быстро, а главное, без дополнительной информации, индекс
массива однозначно определяет положение вершины. Но за это приходится
расплачиваться.<b><a name="m22"> </b><span style='mso-bidi-font-weight:bold'>Каждый следующий
уровень требует удвоения размерности массива, вне зависимости от того, сколько
вершин этого уровня используются. Поэтому основное требование –
сбалансированность. Если есть хотя бы одна ветвь, сильно отличающаяся по длине,
то эффективность использования памяти резко снижается. Если же дерево вырождается
в список, то размерность массива растет экспоненциально W=2<sup>N</sup>.<o:p></o:p></span></p>

<p class=a4><b><a name="m23">Представление дерева в виде ветвящегося списка. </b>Наиболее
близка «по духу» к дереву списковая структура, однако цепочка элементов в
данном случае является не линейной, а разветвляющейся. </p>

<p class=a4><o:p>&nbsp;</o:p><o:p>&nbsp;</o:p></p>

<p class=a4><img border="0" src="Images/081-05.gif" width="268" height="271"></p>

<p class=a4 align=center style='text-align:center'><b><a name="m24">рис. <span
lang=EN-US style='mso-ansi-language:EN-US'>8</span>1.<span lang=EN-US
style='mso-ansi-language:EN-US'>3</span>. Дерево на основе ветвящегося списка</b></p>

<p class=a>Каждая вершина содержит два указателя – на «старшего сына» –
заголовок списка следующего уровня, и на «следующего брата» - ссылка в списке
вершин текущего уровня.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------<span
lang=EN-US style='mso-ansi-language:EN-US'>8</span>1-01.<span lang=EN-US
style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0>// Представление дерева в виде разветвляющегося списка</p>

<p class=a0>struct ltree{</p>

<p class=a0><span style='mso-tab-count:1'>            </span>char *s;</p>

<p class=a0><span style='mso-tab-count:1'>            </span>ltree *son,*bro;<span
style='mso-tab-count:1'>   </span>// Указатели на старшего сына</p>

<p class=a0><span style='mso-tab-count:1'>            </span>};<span
style='mso-tab-count:5'>                                                          </span>//
и младшего брата</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>ltree<span style='mso-tab-count:1'>      </span>A={&quot;aa&quot;,NULL,NULL},<span
style='mso-tab-count:1'>                 </span>//
Последняя в списке</p>

<p class=a0><span style='mso-tab-count:1'>            </span>B={&quot;bb&quot;,NULL,&amp;A},</p>

<p class=a0><span style='mso-tab-count:1'>            </span>C={&quot;cc&quot;,NULL,&amp;B},<span
style='mso-tab-count:1'>                    </span>//
Список потомков - концевых вершин A,B,C<span style='mso-tab-count:2'>                </span><span
lang=EN-US style='mso-ansi-language:EN-US'>D</span>={&quot;<span lang=EN-US
style='mso-ansi-language:EN-US'>dd</span>&quot;,<span lang=EN-US
style='mso-ansi-language:EN-US'>NULL</span>,<span lang=EN-US style='mso-ansi-language:
EN-US'>NULL</span>},</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>E={&quot;ee&quot;,&amp;C,NULL},<o:p></o:p></span></p>

<p class=a0>
<span
style='mso-tab-count:1; mso-ansi-language:EN-US' lang="EN-US">            </span>F={&quot;ff&quot;,&amp;D,&amp;E},<span
style='mso-tab-count:2'>              </span><span style='mso-tab-count:1'>            </span>//
Список потомков G - вершин F,E</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>G={&quot;gg&quot;,&amp;F,NULL},<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>*ph = &amp;G;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void scan_l(ltree
*p, int level){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (p==NULL) return;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>printf(&quot;l=%d
val=%s\n&quot;,level,p-&gt;s);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>for (ltree *q=p-&gt;son;q!=NULL;q=q-&gt;bro)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>scan_l(q,level+1);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void main(){
scan_l(ph,0); }<o:p></o:p></span></p>

<p class=a>Определение <b style='mso-bidi-font-weight:normal'><a name="m25"><span lang=EN-US
style='mso-ansi-language:EN-US'>ltree</span></b><span lang=EN-US> </span>поразительно
напоминает двусвязный список. Ничего удивительного. Ведь определение структуры
задает только факт наличия двух указателей, а каким образом они будут связаны –
это определяется либо инициализацией, либо алгоритмически. На самом деле при
наличии ошибок в программах, работающих со списками, могут получиться похожие
«несанкционированные» нелинейные структуры.</p>

<p class=a4><b><a name="m26">Представление дерева с использованием массива указателей на
потомков. </b>Можно подобрать способ представления, в котором физическая
структура максимально соответствует логической структуре дерева, т.е. ее
внешнему виду: корень, ветви, потомки. Если ветвь считать указателем, то
вершина – это структура, содержащая массив указателей на потомков.</p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'>#define
N 4<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>//------------------------------------------------------81-01.cpp<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'>struct
tree{<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span>char *s;<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span>int</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>n</span>;<span style='mso-tab-count:
5'>                              </span>// Количество потомков в МУ</p>

<p class=MsoPlainText><span style='mso-tab-count:1'>      </span><span
lang=EN-US style='mso-ansi-language:EN-US'>tree *ch[N];<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span>};<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'>tree<span
style='mso-tab-count:1'>  </span>H1={&quot;aa&quot;,0},<span style='mso-tab-count:
2'>            </span><o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span>B1={&quot;bb&quot;,0},<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span>C1={&quot;cc&quot;,0},<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span>D1={&quot;dd&quot;,0},<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span>E1={&quot;ee&quot;,3,&amp;C1,&amp;B1,&amp;H1},<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span>F1={&quot;ff&quot;,0},<span
style='mso-tab-count:2'>            </span><o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span>G1={&quot;gg&quot;,3,&amp;F1,&amp;E1,&amp;D1},<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span>*ph1 = &amp;G1;<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'>void
scan(tree *p, int level){<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span>if (p==NULL) return;<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span>printf(&quot;l=%d
val=%s\n&quot;,level,p-&gt;s);<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span>for (int i=0; i&lt;p-&gt;n; i++)<o:p></o:p></span></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span>scan(p-&gt;ch[i],level+1);<o:p></o:p></span></p>

<p class=MsoPlainText>
<span
style='mso-tab-count:2; mso-ansi-language:EN-US' lang="EN-US">            </span>}</p>

<h3>Эффективность алгоритмов, работающих с деревьями</h3>

<p class=a>Можно провести аналогии между парой «деревья - рекурсивные
алгоритмы» и «пространство-время». При работе рекурсивной программы происходит
развертке дерева вызовов функции во времени, а дерево, как структура данных,
выглядит как отображенный в памяти результат выполнения рекурсивного алгоритма.
<span style='mso-bidi-font-weight:bold'>Именно поэтому к деревьям применимы
выводы относительно эффективности рекурсивных алгоритмов:</span></p>

<p class=a1>- полный рекурсивный обход дерева имеет линейную трудоемкость;<span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a1>- эффективными являются <b style='mso-bidi-font-weight:normal'><a name="m27">жадные
</b>алгоритмы. Применительно к дереву жадность состоит в выборе в каждой
вершине единственного потомка. Вместо цикла рекурсивного вызова для всех
потомков должен быть один вызов. Можно также заменить рекурсивный алгоритм
циклическим, переходя на каждом шаге к выбранному потомку. Основанием для
однозначного <b style='mso-bidi-font-weight:normal'><a name="m28">жадного </b>выбора является
либо введение в дерево избыточности (дополнительные данные в вершинах), либо упорядочение
данных в нем.</p>

<p class=a4><b><a name="m29">Алгоритмы, основанные на полном рекурсивном обходе дерева. </b>Для
начала рассмотрим простейшие алгоритмы безотносительно к способам организации
данных в дереве. Полный рекурсивный обход дерева предполагает просмотр всех
вершин дерева и с целью получения общих характеристик всей древовидной
структуры. Сразу же следует остановиться на технологических способах
формирования результата обхода:</p>

<p class=a1>- явный результат рекурсивной функции предполагает его накопление в
процессе выполнения цепочки возвратов из рекурсивной функции (т.е. накопление
результат идет в обратном направлении – от потомков к предку). При этом каждая
вершина, получая результаты от потомков, вносит собственную «ложку дегтя», т.е.
объединяет результаты поддеревьев с собственным;</p>

<p class=a1>- возможно использование формального параметра – ссылки, которая
передается по цепочке рекурсивных вызовов. В этом случае все рекурсивные вызовы
ссылаются на общую переменную, которая играет роль глобальных данных,
используемых для накопления результата.</p>

<p class=a4><b><a name="m30">Предварительное</b><b
style='mso-bidi-font-weight:normal'> сравнение со списками и массивами. </b><span
style='mso-bidi-font-weight:bold'>Даже не вдаваясь в подробности организации
данных в дереве, можно сделать предварительные выводы, основываясь на известных
нам формах его представления. Во-первых, в </span><b style='mso-bidi-font-weight:
normal'><a name="m31">алгоритмическом аспекте </b><span style='mso-bidi-font-weight:bold'>дерево
реализует известную поговорку «дальше в лес – больше дров». «Дровами» в данном
случае являются вершины, для которых наблюдается экспоненциальный рост
количества с ростом «глубины» дерева. Если при этом удается организовать
эффективное отсечение «лишних» поддеревьев, то можно надеяться на эффективные
алгоритмы поиска элементов по значению и доступа к ним по логическому номеру.
Здесь имеется явное преимущество перед списками, где все подобные алгоритмы
основаны на полном переборе (линейном поиске). Во-вторых, в </span><b
style='mso-bidi-font-weight:normal'>технологическом аспекте</b><span
style='mso-bidi-font-weight:bold'> изменение порядка следования или размещения
вершин в деревьях может быть достигнуто переустановкой связей (ветвей) у
отдельных вершин, так же, как это делается в списках. Здесь имеется явное
преимущество перед массивами, для которых требуется массовое перемещение
(сдвиг) элементов. Таким образом, с точки зрения эффективности работы дерево
представляет собой компромисс между двумя крайностями: массивом и списком.<o:p></o:p></span></p>

<p class=a4><b style='mso-bidi-font-weight:normal'><a name="m32"><o:p>&nbsp;<img border="0" src="Images/081-07.jpg" width="312" height="306"></o:p></b></p>

<p class=a4><b><a name="m33">Трудоемкость алгоритмов на деревьях. </b>Хотя деревья являются и
топологически сложными структурами данных, оценить пределы и условия их
эффективности довольно легко. Прежде всего, введем такую характеристику дерева,
как сбалансированность. <b><a name="m34">Сбалансированность </b>характеризует разброс длин
ветвей дерева. Более точно, речь идет о расстояниях от корневой вершины до
вершины со свободной ветвью. Дерево называется сбалансированным, если длина
максимальной и минимальной ветвей отличается не более чем на 1. Для такого
дерева характерна экспоненциальная (или обратная, логарифмическая) зависимость
между длиной ветви и количеством вершин в дереве:</p>

<p class=a5 style='margin-left:36.0pt;text-indent:36.0pt'><span lang=EN-US>N =
1 + m + m<sup>2 </sup>+ m<sup>3 </sup>+ … + m<sup>L &lt; </sup><span
style='mso-spacerun:yes'> </span>m<sup>L </sup>, L &lt; log<sub>m</sub>N</span></p>

<p class=a4>В самом худшем случае при наличии только одного потомка в каждой
вершине дерево вырождается в список, в этом случае длина ветви равна количеству
вершин без 1.</p>

<p class=a>Далее, все алгоритмы, основанные на однократном, <b><a name="m35">полном
рекурсивном обходе</b>, будут иметь линейную трудоемкость <b><a name="m36"><span lang=EN-US
style='mso-ansi-language:EN-US'>T</span>=<span lang=EN-US
style='mso-ansi-language:EN-US'>N</span>. </b>Их усовершенствование может
состоять только в ограничении «глубины погружения», если на это есть
достаточные основания. Другое дело, алгоритмы, основанные на <b><a name="m37">ветвлении. </b>В
каждой вершины они выбирают только одного из возможных потомков. Такие
алгоритмы называют <b><a name="m38">жадными</b> (см. «8.7. Эффективность рекурсивных
алгоритмов»). Сразу же можно увидеть, что их трудоемкость равна длине выбранной
ими ветви дерева. Для сбалансированного дерева зависимость будет
логарифмической<span lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a5 style='margin-left:36.0pt;text-indent:36.0pt'><span lang=EN-US>T =
L &lt; log<sub>m</sub>N,</span></p>

<p class=a4>для вырожденного в список дерева – линейной. Здесь возникают две
проблемы. Во-первых, поддержка сбалансированности дерева. Для нее имеется два
решения:</p>

<p class=a1>- использование алгоритмов, сохраняющих сбалансированность дерева,
которые являются значительно более сложными, чем обычно, поскольку используют
различные топологические преобразования групп смежных вершин дерева (причем
рекурсивно);</p>

<p class=a1>- периодическое выравнивание (балансировка) дерева, возможно с
использованием дополнительной структуры данных. Данное решение позволяет
использовать простые алгоритмы работы с деревом, но требует слежения за его
сбалансированностью (заметим, что это могут делать те же самые алгоритмы,
например, определяя длину ветви при поиске заданного значения). Процедура
балансировки может быть достаточно трудоемкой, но вызываемой сравнительно
редко. </p>

<p class=a4>На житейском уровне эту альтернативу можно сформулировать как
«идеальный порядок или периодическая<span style='mso-spacerun:yes'> 
</span>генеральная уборка». Аналогичная ситуация возникает в любых системах
динамического распределения и утилизации ресурсов: в системе динамического
распределения памяти (2.6), при планировании двоичного файла (9.2),<span
style='mso-spacerun:yes'>  </span>в системе управления файлами операционной
системы, где она имеет похожие решения.</p>

<p class=a>Вторая проблема упирается в основания, которые имеет алгоритм для
однозначного выбора единственного потомка в каждой вершине (художественная
аналогия<span style='mso-spacerun:yes'>  </span>- «рыцарь на распутье»). Здесь
опять же возможны два подхода:</p>

<p class=a1>- наличие в<span style='mso-spacerun:yes'>  </span>вершине
дополнительной (избыточной) информации, позволяющей сделать такой выбор «здесь
и сейчас»;</p>

<p class=a1>- наличие определенного порядка размещения данных в дереве.</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=a4><b><a name="m39">Сравнительная характеристика массивов, списков и деревьев.<o:p></o:p></b></p>

<p class=a4><b><a name="m40"><o:p>&nbsp;</o:p></b></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=499
 style='width:373.95pt;margin-left:33.75pt;border-collapse:collapse;border:
 none;mso-border-alt:solid windowtext .5pt;mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
 mso-border-insideh:.5pt solid windowtext;mso-border-insidev:.5pt solid windowtext'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=168 valign=top style='width:125.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span style='font-family:Arial'>Оценка Т<o:p></o:p></span></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><b><a name="m41"><span style='font-family:"Times New Roman"'>Извлечение по ЛН<o:p></o:p></span></b></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><b><a name="m42"><span style='font-family:"Times New Roman"'>Вставка, удаление<o:p></o:p></span></b></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4 align=left style='text-align:left'><b><a name="m43"><span style='font-family:
  "Times New Roman"'>Поиск по значению (упоряд.)<o:p></o:p></span></b></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=168 valign=top style='width:125.9pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><b><a name="m44"><span style='font-family:"Times New Roman"'>Массив<o:p></o:p></span></b></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span style='font-family:Arial'>1<o:p></o:p></span></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>N</span><span
  style='font-family:Arial'><o:p></o:p></span></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>log</span><span
  style='font-family:Arial'>(</span><span lang=EN-US style='font-family:Arial;
  mso-ansi-language:EN-US'>N</span><span style='font-family:Arial'>)<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width=168 valign=top style='width:125.9pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><b><a name="m45"><span style='font-family:"Times New Roman"'>Массив указателей<o:p></o:p></span></b></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>1(2)<o:p></o:p></span></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>N<o:p></o:p></span></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>log(N)<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td width=168 valign=top style='width:125.9pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><b><a name="m46"><span style='font-family:"Times New Roman"'>Список<o:p></o:p></span></b></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>N</span><span
  style='font-family:Arial'><o:p></o:p></span></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span style='font-family:Arial'>2(3)<o:p></o:p></span></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>N</span><span
  style='font-family:Arial'><o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4'>
  <td width=168 valign=top style='width:125.9pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4 align=left style='text-align:left'><b><a name="m47"><span style='font-family:
  "Times New Roman"'>Дерево сбаланс.<o:p></o:p></span></b></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>log</span><span
  style='font-family:Arial'>(</span><span lang=EN-US style='font-family:Arial;
  mso-ansi-language:EN-US'>N</span><span style='font-family:Arial'>)<o:p></o:p></span></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>1…log(N)<o:p></o:p></span></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>log(N)<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5;mso-yfti-lastrow:yes'>
  <td width=168 valign=top style='width:125.9pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><b><a name="m48"><span style='font-family:"Times New Roman"'>Дерево несбаланс.<o:p></o:p></span></b></p>
  </td>
  <td width=104 valign=top style='width:77.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>log</span><span
  style='font-family:Arial'>(</span><span lang=EN-US style='font-family:Arial;
  mso-ansi-language:EN-US'>N</span><span style='font-family:Arial'>)…</span><span
  lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>N</span><span
  style='font-family:Arial'> <o:p></o:p></span></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>1…log(N)<o:p></o:p></span></p>
  </td>
  <td width=113 valign=top style='width:3.0cm;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a4><span lang=EN-US style='font-family:Arial;mso-ansi-language:EN-US'>log(N)…N
  <o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoPlainText><o:p>&nbsp;</o:p></p>

<p class=MsoPlainText><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
