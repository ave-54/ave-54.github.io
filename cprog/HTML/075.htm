<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=Edit-Time-Data href="075.files/editdata.mso">
<title>Романов Е.Л. Беседы о программировании</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Романов</o:Author>
  <o:Template>Книга.dot</o:Template>
  <o:LastAuthor>www.PHILka.RU</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>149</o:TotalTime>
  <o:LastPrinted>2004-11-25T08:30:00Z</o:LastPrinted>
  <o:Created>2008-02-13T20:09:00Z</o:Created>
  <o:LastSaved>2008-02-13T20:09:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>976</o:Words>
  <o:Characters>5564</o:Characters>
  <o:Company>NSTU_VT</o:Company>
  <o:Bytes>11776</o:Bytes>
  <o:Lines>46</o:Lines>
  <o:Paragraphs>13</o:Paragraphs>
  <o:CharactersWithSpaces>6527</o:CharactersWithSpaces>
  <o:Version>11.6360</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DoNotHyphenateCaps/>
  <w:DrawingGridHorizontalSpacing>2,85 пт</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>2,85 пт</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DrawingGridVerticalOrigin>99,25 пт</w:DrawingGridVerticalOrigin>
  <w:Compatibility>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
   <w:UseWord97LineBreakingRules/>
   <w:SelectEntireFieldWithStartOrEnd/>
   <w:UseWord2002TableStyleRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:"Times New Roman CYR";
	panose-1:2 2 6 3 5 4 5 2 3 4;
	mso-font-charset:204;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
@font-face
	{font-family:"Arial CYR";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:204;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
h1
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:14.0pt;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h3
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	font-weight:normal;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
p.a, li.a, div.a
	{mso-style-name:текст;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.0pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a0, li.a0, div.a0
	{mso-style-name:программа;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a1, li.a1, div.a1
	{mso-style-name:список;
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:18.45pt;
	margin-bottom:0cm;
	margin-left:35.45pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	tab-stops:42.55pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a2, li.a2, div.a2
	{mso-style-name:определение;
	mso-style-parent:текст;
	margin-top:12.0pt;
	margin-right:32.9pt;
	margin-bottom:12.0pt;
	margin-left:35.45pt;
	text-align:justify;
	text-indent:.55pt;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-alt:solid windowtext 1.5pt;
	padding:0cm;
	mso-padding-alt:1.0pt 1.0pt 1.0pt 1.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a3, li.a3, div.a3
	{mso-style-name:эпиграф;
	margin-top:12.0pt;
	margin-right:32.9pt;
	margin-bottom:12.0pt;
	margin-left:5.0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-style:italic;
	mso-bidi-font-style:normal;}
p.a4, li.a4, div.a4
	{mso-style-name:"от края";
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a5, li.a5, div.a5
	{mso-style-name:Формула;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	layout-grid-mode:line;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.a6, li.a6, div.a6
	{mso-style-name:"без формата";
	mso-style-parent:программа;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("075.files/header.htm") fs;
	mso-footnote-continuation-separator:url("075.files/header.htm") fcs;
	mso-endnote-separator:url("075.files/header.htm") es;
	mso-endnote-continuation-separator:url("075.files/header.htm") ecs;}
@page Section1
	{size:21.0cm 842.0pt;
	margin:33.45pt 42.55pt 72.0pt 89.85pt;
	mso-header-margin:14.2pt;
	mso-footer-margin:31.75pt;
	mso-header:url("075.files/header.htm") h1;
	mso-even-footer:url("075.files/header.htm") ef1;
	mso-footer:url("075.files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:950165416;
	mso-list-type:hybrid;
	mso-list-template-ids:-1877590502 -1451994042 68747267 68747269 68747265 68747267 68747269 68747265 68747267 68747269;}
@list l0:level1
	{mso-level-start-at:85;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Обычная таблица";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=RU style='tab-interval:36.0pt' background="back.gif">

<div class=Section1>

<h2><font face="Arial"><span lang=EN-US style='mso-ansi-language:EN-US'>7</span>.5. Рекурсия,
стек, очередь</font></h2>

<p class=a4><b style='mso-bidi-font-weight:normal'><a name="m1">Рекурсия и стек. </b><span
style='mso-bidi-font-weight:bold'>Каждый шаг рекурсии представляет собой
независимый алгоритм (отдельный «экземпляр» функции). В случае ветвящейся
рекурсии один такой алгоритм порождает несколько подобных, поскольку все они
выполняются на одном процессоре, возникают «отложенные шаги», которые
необходимо выполнить «потом». Возникает вопрос, а где, собственно, говоря,
сохраняются данные об этих отложенных шагах. В случае использования обычной
рекурсии само текущее состояние алгоритма, его локальные данные (например,
индекс цикла перебора вариантов) и задают поведение текущего шага рекурсии «в
будущем». При рекурсивном вызове это состояние запоминается в стеке, при
возвращении – автоматически продолжает текущий шаг от точки «замерзания». Но
то, что делается автоматически, можно реализовать в явном виде с использованием
специально организованного программного стека, если помещать в него набор
данных, соответствующих начальному состоянию каждого следующего шага. Тогда
рекурсивный алгоритм становится простым циклическим.<o:p></o:p></span></p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//-------------------------------------------------------------------<span
lang=EN-US style='mso-ansi-language:EN-US'>75-00.cpp<o:p></o:p></span></p>

<p class=a0>// Схема рекурсивного алгоритма с явным стеком</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>stack</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>S</span>;<span
style='mso-tab-count:5'>                                                            </span>//
Явный стек</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>data</span><span
style='mso-tab-count:1'>      </span><span lang=EN-US style='mso-ansi-language:
EN-US'>D</span>0={…};<span style='mso-tab-count:3'>                                    </span>//
Начальное состояние – первый шаг</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>S</span>.<span
lang=EN-US style='mso-ansi-language:EN-US'>push</span>(<span lang=EN-US
style='mso-ansi-language:EN-US'>D</span>0);<span style='mso-tab-count:4'>                                           </span>//
Поместить в стек</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>while</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>S</span>.<span lang=EN-US
style='mso-ansi-language:EN-US'>size</span>()!=0){<span style='mso-tab-count:
3'>                                  </span>// Цикл извлечения шагов из стека</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>data</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>D</span>=<span lang=EN-US
style='mso-ansi-language:EN-US'>S</span>.<span lang=EN-US style='mso-ansi-language:
EN-US'>pop</span>();<span style='mso-tab-count:3'>                         </span>//
Извлечь из стека данные нового шага</p>

<p class=a0><span style='mso-tab-count:1'>            </span>…<span
style='mso-tab-count:4'>                                             </span><span
lang=EN-US style='mso-ansi-language:EN-US'>// </span>Очередной шаг<span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (</span>тупик<span lang=EN-US
style='mso-ansi-language:EN-US'>) continue;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (</span>успех<span lang=EN-US
style='mso-ansi-language:EN-US'>) break;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>for (int i=0; i&lt;N; i++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>{<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>data D1;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>D1=…<span
style='mso-tab-count:3'>                           </span>// </span>Данные
нового шага</p>

<p class=a0><span style='mso-tab-count:2'>                        </span><span
lang=EN-US style='mso-ansi-language:EN-US'>S</span>.<span lang=EN-US
style='mso-ansi-language:EN-US'>push</span>(<span lang=EN-US style='mso-ansi-language:
EN-US'>D</span>1);<span style='mso-tab-count:2'>                   </span>//
сформировать и поместить в стек</p>

<p class=a0><span style='mso-tab-count:2'>                        </span>}<span
style='mso-tab-count:1'>           </span></p>

<p class=a0 style='text-indent:36.0pt'>}</p>

<p class=a4>В целом такое решение является более громоздким, нежели явная
рекурсия. Прежде всего, потому, что в стеке требуется сохранять все данные,
касающиеся начального состояния следующего шага. Кроме того, если рекурсивная
функция содержит некоторый завершающий фрагмент кода после рекурсивных вызовов,
то он также должен быть «отложен» в стек. В качестве примера рассмотрим уже
известное решение задачи о лабиринте (см. 5.3). На каждом его шаге
рассматривается возможность движения через очередную точку («не стена» и не
повторное прохождение), и при положительном решении производится отметка этой
точки и попытка движения в 4 соседние. При явном использовании стека на каждом
шаге цикла из стека извлекается очередная точка (<b><a name="m2"><span lang=EN-US
style='mso-ansi-language:EN-US'>struct</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>XY</span></b>) и в стек записываются
координаты 4-х соседних точек. Поскольку завершающим фрагментом рекурсивной
функции является снятие отметки с пройденной точки, то данные об этом
отложенном действии также надо занести в стек. Для этого в <b><a name="m3"><span lang=EN-US
style='mso-ansi-language:EN-US'>struct</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>XY</span><span lang=EN-US> </span></b>вводится
дополнительный признак <b><a name="m4"><span lang=EN-US style='mso-ansi-language:EN-US'>last</span>.<o:p></o:p></b></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0>//------------------------------------------------------75-01.<span
lang=EN-US style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0>// Задача о лабиринте – явный стек</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>struct</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>XY</span>{ <span
style='mso-tab-count:4'>                                             </span>// <span
lang=EN-US style='mso-ansi-language:EN-US'>x</span>,<span lang=EN-US
style='mso-ansi-language:EN-US'>y</span> – координаты точки</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>int</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>x</span>,<span lang=EN-US
style='mso-ansi-language:EN-US'>y</span>,<span lang=EN-US style='mso-ansi-language:
EN-US'>last</span>; <span style='mso-tab-count:3'>                               </span>//
<span lang=EN-US style='mso-ansi-language:EN-US'>last</span> – признак
«последнего» шага</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>XY(int x0,int y0,int last0=0) {
x=x0,y=y0,last=last0; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>XY(){ x=y=last=0; }<o:p></o:p></span></p>

<p class=a0>
<span
style='mso-tab-count:1; mso-ansi-language:EN-US' lang="EN-US">            </span>}; </p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>stack</span>&lt;<span
lang=EN-US style='mso-ansi-language:EN-US'>XY</span>,100&gt; <span lang=EN-US
style='mso-ansi-language:EN-US'>S</span>;<span style='mso-tab-count:3'>                                  </span>//
Явный стек</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>XY<span
style='mso-tab-count:1'>        </span>A(5,5);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>main</span>(){</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>S</span>.<span
lang=EN-US style='mso-ansi-language:EN-US'>push</span>(<span lang=EN-US
style='mso-ansi-language:EN-US'>A</span>);<span style='mso-tab-count:4'>                                             </span>//
Поместить в стек</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>found</span>=0;<span
style='mso-tab-count:4'>                                           </span>//
Признак завершения</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>while(S.size()!=0){<span
style='mso-tab-count:3'>                                  </span>// Цикл
извлечения шагов из стека<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>XY</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>D</span>=<span lang=EN-US
style='mso-ansi-language:EN-US'>S</span>.<span lang=EN-US style='mso-ansi-language:
EN-US'>pop</span>();<span style='mso-tab-count:3'>                           </span>//
Извлечь из стека данные нового шага</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>if (D.last==1){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>LB</span>[<span
lang=EN-US style='mso-ansi-language:EN-US'>D</span>.<span lang=EN-US
style='mso-ansi-language:EN-US'>x</span>][<span lang=EN-US style='mso-ansi-language:
EN-US'>D</span>.<span lang=EN-US style='mso-ansi-language:EN-US'>y</span>]=0;<span
style='mso-spacerun:yes'>     </span><span style='mso-tab-count:1'>        </span>//
&quot;последний&quot; вариант - снять отметку</p>

<p class=a0><span style='mso-tab-count:2'>                        </span><span
lang=EN-US style='mso-ansi-language:EN-US'>continue;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if (D.x&lt;0 || D.x&gt;9 || D.y&lt;0
|| D.y&gt;9) <o:p></o:p></span></p>

<p class=a0>
<span
style='mso-tab-count:2; mso-ansi-language:EN-US' lang="EN-US">                        </span>{<span
lang=EN-US style='mso-ansi-language:EN-US'>found</span>=1; <span lang=EN-US
style='mso-ansi-language:EN-US'>break</span>; }<span style='mso-tab-count:1'>           </span>//
Достигли края - выйти из цикла</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>if (LB[D.x][D.y]!=0) <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>continue</span>;<span
style='mso-spacerun:yes'>  </span><span style='mso-tab-count:2'>                     </span>//
стенки и повторы – завершить шаг</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>LB</span>[<span lang=EN-US style='mso-ansi-language:
EN-US'>D</span>.<span lang=EN-US style='mso-ansi-language:EN-US'>x</span>][<span
lang=EN-US style='mso-ansi-language:EN-US'>D</span>.<span lang=EN-US
style='mso-ansi-language:EN-US'>y</span>]=2;<span
style='mso-spacerun:yes'>         </span><span style='mso-tab-count:2'>                </span>//
отметить точку</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>S</span>.<span lang=EN-US style='mso-ansi-language:
EN-US'>push</span>(<span lang=EN-US style='mso-ansi-language:EN-US'>XY</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>D</span>.<span lang=EN-US
style='mso-ansi-language:EN-US'>x</span>,<span lang=EN-US style='mso-ansi-language:
EN-US'>D</span>.<span lang=EN-US style='mso-ansi-language:EN-US'>y</span>,1));<span
style='mso-tab-count:2'>               </span>// вариант для
&quot;завершения&quot; шага рекурсии</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>S</span>.<span lang=EN-US style='mso-ansi-language:
EN-US'>push</span>(<span lang=EN-US style='mso-ansi-language:EN-US'>XY</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>D</span>.<span lang=EN-US
style='mso-ansi-language:EN-US'>x</span>+1,<span lang=EN-US style='mso-ansi-language:
EN-US'>D</span>.<span lang=EN-US style='mso-ansi-language:EN-US'>y</span>,0));<span
style='mso-tab-count:1'>           </span>// варианты для соседних точек</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>S</span>.<span lang=EN-US style='mso-ansi-language:
EN-US'>push</span>(<span lang=EN-US style='mso-ansi-language:EN-US'>XY</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>D</span>.<span lang=EN-US
style='mso-ansi-language:EN-US'>x</span>,<span lang=EN-US style='mso-ansi-language:
EN-US'>D</span>.<span lang=EN-US style='mso-ansi-language:EN-US'>y</span>+1,0));</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>S</span>.<span lang=EN-US style='mso-ansi-language:
EN-US'>push</span>(<span lang=EN-US style='mso-ansi-language:EN-US'>XY</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>D</span>.<span lang=EN-US
style='mso-ansi-language:EN-US'>x</span>-1,<span lang=EN-US style='mso-ansi-language:
EN-US'>D</span>.<span lang=EN-US style='mso-ansi-language:EN-US'>y</span>,0));</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>S</span>.<span lang=EN-US style='mso-ansi-language:
EN-US'>push</span>(<span lang=EN-US style='mso-ansi-language:EN-US'>XY</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>D</span>.<span lang=EN-US
style='mso-ansi-language:EN-US'>x</span>,<span lang=EN-US style='mso-ansi-language:
EN-US'>D</span>.<span lang=EN-US style='mso-ansi-language:EN-US'>y</span>-1,0));</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>}<o:p></o:p></span></p>

<p class=a0>}</p>

<p class=a4><b style='mso-bidi-font-weight:normal'><a name="m5"><o:p>&nbsp;</o:p></b></p>

<p class=a4><b style='mso-bidi-font-weight:normal'><a name="m6">Волновой алгоритм. </b><a name="m6"><span
style='mso-bidi-font-weight:bold'>Рекурсивный алгоритм дает нам
последовательность выполнения шагов, известную как «рекурсивный обход дерева»,
которая определяется свойствами<span style='mso-spacerun:yes'>  </span>стека,
его реализующего.<o:p></o:p></span></p>

<p class=a4>Имеется другая последовательность обхода, которую образно можно
представить в виде волны, распространяющейся от корня дерева к вершинам. Такой
обход уже нельзя назвать рекурсивным, потому что ее нельзя реализовать с
помощью механизма явного рекурсивного вызова функции. Тем не менее, идея
разветвляющегося алгоритма с идентичными шагами остается в силе. Для того,
чтобы шаги алгоритма выполняются «по слоям»,<span style='mso-spacerun:yes'> 
</span>нужно вместо явного стека использовать аналогичную очередь шагов
алгоритма. </p>

<p class=a4><a name="m7"><b>Задача поиска минимального пути. Волновой алгоритм. </b>Идея
«волны» иногда позволяет резко сократить число просматриваемых вариантов в
сравнении с рекурсивным перебором. Например, алгоритм определения кратчайших
путей на графе можно решить, представив его как распространение «волны» из
исходной вершины. Такая волна, проходя через вершины, запоминает в них длину
пройденного пути. Перечислим «составные части» такого алгоритма:</a></p>

<p class=a1 style='margin-left:53.45pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:42.55pt list 53.45pt'><a name="m7"><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Times New Roman'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><![endif]>прохождение волны через вершину моделируется
помещением ее в очередь;</a></p>

<p class=a1 style='margin-left:53.45pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:42.55pt list 53.45pt'><a name="m7"><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Times New Roman'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><![endif]>волновой алгоритм извлекает вершины из очереди и
помещает в нее<span style='mso-spacerun:yes'>  </span>некоторую часть
«соседей», в которые эта волна распространяется;</a></p>

<p class=a1 style='margin-left:53.45pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:42.55pt list 53.45pt'><a name="m7"><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Times New Roman'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><![endif]>при распространении волны в соседнюю вершину в
нее помещается длина пути из начальной: она равна длине пути до текущей
(которая уже содержится в текущей вершине согласно этому же алгоритму) плюс
расстояние до «соседа»;</a></p>

<p class=a1 style='margin-left:53.45pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:42.55pt list 53.45pt'><a name="m7"><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Times New Roman'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><![endif]>волна распространяется в не пройденные волной
вершины;</a></p>

<p class=a1 style='margin-left:53.45pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:42.55pt list 53.45pt'><a name="m7"><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Times New Roman'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><![endif]>волна распространяется в пройденные вершины,
если новое расстояние меньше старого, в этом случае она вызывает «повторную
волну»;</a></p>

<p class=a1 style='margin-left:53.45pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:42.55pt list 53.45pt'><a name="m7"><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Times New Roman'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><![endif]>зацикливание алгоритма и повторное прохождение
волны в обратном направлении исключается предыдущим условием.</a></p>

<p class=a0><o:p><a name="m7">&nbsp;</a></o:p></p>

<p class=a0><a name="m7">//------------------------------------------------------75-02.<span
lang=EN-US style='mso-ansi-language:EN-US'>cpp</span></a></p>

<p class=a0><a name="m7">// Поиск кратчайших путей на графе – волновой алгоритм</a></p>

<p class=a0><a name="m7">#define N 100</a></p>

<p class=a0><a name="m7">int A[N][N];<span style='mso-tab-count:4'>                                            </span>//
матрица расстояний до соседей</a></p>

<p class=a0><a name="m7">int W[N];<span style='mso-tab-count:4'>                                               </span>//
матрица расстояний от начального</a></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><a name="m7">void main(){</a><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><a name="m7">int nc=0,ncmp=0;</a><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><a name="m7">for (int
i=0;i&lt;N;i++) W[i]=-1;</a><o:p></o:p></span></p>

<p class=a0><a name="m7">create(0.05);</a></p>

<p class=a0><a name="m7">int n0=0;<span style='mso-tab-count:4'>                                               </span>//
Начальная вершина и расстояние до самой себя =0</a></p>

<p class=a0><a name="m7">W[n0]=0;</a></p>

<p class=a0><a name="m7">queue&lt;int,100&gt; Q;<span style='mso-tab-count:3'>                                 </span>//
Очередь номеров вершин</a></p>

<p class=a0><a name="m7">Q.in(n0);<span style='mso-tab-count:4'>                                                </span>//
Поместить исходную в очередь</a></p>

<p class=a0><a name="m7">while(Q.size()!=0){<span style='mso-tab-count:3'>                                  </span>//
Пока очередь не пуста</a></p>

<p class=a0><a name="m7"><span style='mso-tab-count:1'>            </span>int ni=Q.out();<span
style='mso-tab-count:3'>                            </span>// Извлечь номер
очередной вершины</a></p>

<p class=a0><a name="m7"><span style='mso-tab-count:1'>            </span>if (W[ni]==-1)
continue; <span style='mso-tab-count:2'>              </span>// ошибка - она
еще не пройдена</a></p>

<p class=a0><a name="m7"><span style='mso-tab-count:1'>            </span>nc++;<span
style='mso-tab-count:4'>                                        </span>//
подсчет трудоемкости алгоритма</a></p>

<p class=a0><a name="m7"><span style='mso-tab-count:1'>            </span>for
(i=0;i&lt;N;i++)<span style='mso-tab-count:1'> </span><span style='mso-tab-count:
2'>                        </span>// проверка всех соседей</a></p>

<p class=a0><a name="m7"><span style='mso-tab-count:1'>            </span>if (A[ni][i]!=0){<span
style='mso-tab-count:3'>                             </span>// Это неотмеченный
сосед </a> </p>

<p class=a0><a name="m7"><span style='mso-tab-count:2'>                        </span><span
lang=EN-US style='mso-ansi-language:EN-US'>if (W[i]==-1 ||
W[i]&gt;W[ni]+A[ni][i])</span></a><o:p></o:p></p>

<p class=a0>
<a name="m7">
<span
style='mso-tab-count:3; mso-ansi-language:EN-US' lang="EN-US">                                    </span>{<span
style='mso-tab-count:2'>                       </span>//или сосед с более
длинным путем</a></p>

<p class=a0>
<a name="m7">
<span
style='mso-tab-count:3; mso-ansi-language:EN-US' lang="EN-US">                                    </span>W[i]=W[ni]+A[ni][i];
// Уменьшить длину пути до него</a></p>

<p class=a0><a name="m7"><span style='mso-tab-count:3'>                                    </span>Q.in(i);<span
style='mso-tab-count:2'>              </span>// Поместить в очередь (вторая волна)</a></p>

<p class=a0><a name="m7"><span style='mso-tab-count:3'>                                    </span>}</a></p>

<p class=a0><a name="m7"><span style='mso-tab-count:2'>                        </span>ncmp++;<span
style='mso-tab-count:2'>                       </span>// подсчет трудоемкости
алгоритма</a></p>

<p class=a0><a name="m7"><span style='mso-tab-count:2'>                        </span><span
lang=EN-US style='mso-ansi-language:EN-US'>}</span></a><o:p></o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><a name="m7"><span
style='mso-tab-count:1'>            </span>}</a><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><a name="m7">for
(i=0;i&lt;N;i++) printf(&quot;%d &quot;,W[i]);</a><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><a name="m7">printf(&quot;\nnc=%d
ncmp=%d\n&quot;,nc,ncmp); }</a><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p><a name="m7">&nbsp;</a></o:p></span></p>

</div>

</body>

</html>
