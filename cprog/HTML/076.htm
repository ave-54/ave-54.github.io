<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=Edit-Time-Data href="076.files/editdata.mso">
<title>Романов Е.Л. Беседы о программировании</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Романов</o:Author>
  <o:Template>Книга.dot</o:Template>
  <o:LastAuthor>www.PHILka.RU</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>132</o:TotalTime>
  <o:Created>2008-02-13T20:12:00Z</o:Created>
  <o:LastSaved>2008-02-13T20:12:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>2123</o:Words>
  <o:Characters>12103</o:Characters>
  <o:Company>NSTU_VT</o:Company>
  <o:Bytes>11776</o:Bytes>
  <o:Lines>100</o:Lines>
  <o:Paragraphs>28</o:Paragraphs>
  <o:CharactersWithSpaces>14198</o:CharactersWithSpaces>
  <o:Version>11.6360</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DoNotHyphenateCaps/>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
   <w:UseWord97LineBreakingRules/>
   <w:SelectEntireFieldWithStartOrEnd/>
   <w:UseWord2002TableStyleRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Times New Roman CYR";
	panose-1:2 2 6 3 5 4 5 2 3 4;
	mso-font-charset:204;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
@font-face
	{font-family:"Arial CYR";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:204;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
h1
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:14.0pt;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h3
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	font-weight:normal;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.a, li.a, div.a
	{mso-style-name:текст;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.0pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a0, li.a0, div.a0
	{mso-style-name:программа;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a1, li.a1, div.a1
	{mso-style-name:список;
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:18.45pt;
	margin-bottom:0cm;
	margin-left:35.45pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	tab-stops:42.55pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a2, li.a2, div.a2
	{mso-style-name:определение;
	mso-style-parent:текст;
	margin-top:12.0pt;
	margin-right:32.9pt;
	margin-bottom:12.0pt;
	margin-left:35.45pt;
	text-align:justify;
	text-indent:.55pt;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-alt:solid windowtext 1.5pt;
	padding:0cm;
	mso-padding-alt:1.0pt 1.0pt 1.0pt 1.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a3, li.a3, div.a3
	{mso-style-name:эпиграф;
	margin-top:12.0pt;
	margin-right:32.9pt;
	margin-bottom:12.0pt;
	margin-left:5.0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-style:italic;
	mso-bidi-font-style:normal;}
p.a4, li.a4, div.a4
	{mso-style-name:"от края";
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a5, li.a5, div.a5
	{mso-style-name:Формула;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	layout-grid-mode:line;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.a6, li.a6, div.a6
	{mso-style-name:"без формата";
	mso-style-parent:программа;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a7, li.a7, div.a7
	{mso-style-name:Грамматика;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	layout-grid-mode:line;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("076.files/header.htm") fs;
	mso-footnote-continuation-separator:url("076.files/header.htm") fcs;
	mso-endnote-separator:url("076.files/header.htm") es;
	mso-endnote-continuation-separator:url("076.files/header.htm") ecs;}
@page Section1
	{size:21.0cm 842.0pt;
	margin:33.45pt 42.55pt 72.0pt 89.85pt;
	mso-header-margin:14.2pt;
	mso-footer-margin:31.75pt;
	mso-header:url("076.files/header.htm") h1;
	mso-even-footer:url("076.files/header.htm") ef1;
	mso-footer:url("076.files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:-2;
	mso-list-type:simple;
	mso-list-template-ids:-1;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-text:*;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l1
	{mso-list-id:14116062;
	mso-list-type:simple;
	mso-list-template-ids:68747265;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l2
	{mso-list-id:19210001;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l2:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l3
	{mso-list-id:24336118;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l3:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l4
	{mso-list-id:45446861;
	mso-list-type:simple;
	mso-list-template-ids:-1035561468;}
@list l4:level1
	{mso-level-start-at:3;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;
	font-family:"Times New Roman";}
@list l5
	{mso-list-id:155734713;
	mso-list-type:simple;
	mso-list-template-ids:68747265;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l6
	{mso-list-id:219753174;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l6:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l7
	{mso-list-id:291373071;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l7:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l8
	{mso-list-id:308751901;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l8:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l9
	{mso-list-id:361201175;
	mso-list-type:simple;
	mso-list-template-ids:68747265;}
@list l9:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l10
	{mso-list-id:439226077;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l10:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l11
	{mso-list-id:504125836;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l11:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l12
	{mso-list-id:550314046;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l12:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l13
	{mso-list-id:585117856;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l13:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l14
	{mso-list-id:641078275;
	mso-list-type:simple;
	mso-list-template-ids:-1390630326;}
@list l14:level1
	{mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;}
@list l15
	{mso-list-id:753820140;
	mso-list-type:simple;
	mso-list-template-ids:-1;}
@list l15:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F02D;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	mso-level-legacy:yes;
	mso-level-legacy-indent:54.0pt;
	mso-level-legacy-space:0cm;
	margin-left:90.0pt;
	text-indent:-54.0pt;
	font-family:Symbol;}
@list l16
	{mso-list-id:829055557;
	mso-list-type:simple;
	mso-list-template-ids:68747279;}
@list l16:level1
	{mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;}
@list l17
	{mso-list-id:997422636;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l17:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l18
	{mso-list-id:1086998756;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l18:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l19
	{mso-list-id:1126922596;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l19:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l20
	{mso-list-id:1150681741;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l20:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l21
	{mso-list-id:1153449163;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l21:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l22
	{mso-list-id:1194078894;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l22:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l23
	{mso-list-id:1219903422;
	mso-list-type:simple;
	mso-list-template-ids:1242228614;}
@list l23:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;
	font-family:"Times New Roman";}
@list l24
	{mso-list-id:1223759624;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l24:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l25
	{mso-list-id:1235971197;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l25:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l26
	{mso-list-id:1395006293;
	mso-list-type:simple;
	mso-list-template-ids:-1646633052;}
@list l26:level1
	{mso-level-text:%1\F02E;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	mso-level-legacy:yes;
	mso-level-legacy-indent:18.0pt;
	mso-level-legacy-space:0cm;
	margin-left:18.0pt;
	text-indent:-18.0pt;}
@list l27
	{mso-list-id:1443762401;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l27:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l28
	{mso-list-id:1460100819;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l28:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l29
	{mso-list-id:1490289828;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l29:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l30
	{mso-list-id:1498185254;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l30:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l31
	{mso-list-id:1548567801;
	mso-list-type:simple;
	mso-list-template-ids:68747279;}
@list l31:level1
	{mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;}
@list l32
	{mso-list-id:1590429434;
	mso-list-type:simple;
	mso-list-template-ids:68747265;}
@list l32:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l33
	{mso-list-id:1757944385;
	mso-list-type:simple;
	mso-list-template-ids:68747279;}
@list l33:level1
	{mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;}
@list l34
	{mso-list-id:1902709211;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l34:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l35
	{mso-list-id:1949972418;
	mso-list-type:simple;
	mso-list-template-ids:68747279;}
@list l35:level1
	{mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;}
@list l36
	{mso-list-id:1965571684;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l36:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l37
	{mso-list-id:2008702181;
	mso-list-type:simple;
	mso-list-template-ids:-1688273568;}
@list l37:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l38
	{mso-list-id:2018118172;
	mso-list-type:simple;
	mso-list-template-ids:2131287754;}
@list l38:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;}
@list l0:level1 lfo2
	{mso-level-start-at:1;
	mso-level-number-format:bullet;
	mso-level-numbering:continue;
	mso-level-text:\F02D;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	mso-level-legacy:yes;
	mso-level-legacy-indent:54.0pt;
	mso-level-legacy-space:0cm;
	margin-left:90.0pt;
	text-indent:-54.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Обычная таблица";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=RU style='tab-interval:36.0pt' background="back.gif">

<div class=Section1>

<h2><font face="Arial">7.6. Рекурсия и синтаксический анализ</font></h2>

<p class=a>Синтаксис любого языка содержит прямые или косвенные рекурсивные
определения. Например, в список операторов языка входит оператор цикла, который
содержит заголовок и тело, являющееся опять-таки оператором. Любое, сколь
угодно сложное выражение, заключенное в скобки, становится элементарным
выражение (термом). Рекурсия в синтаксических анализаторах (распознавателях)
может присутствовать явно или скрыто. Например, магазинные автоматы – конечные
автоматы, снабженные стеком, используют этот стек для сохранения частей
рекурсивно вложенных друг в друга фрагментов, но при этом сама программа
распознавания рекурсии в явном виде не содержит, а является обыкновенным
циклом.</p>

<p class=a>Здесь нам более интересны рекурсивные распознаватели. К сожалению,
изложение принципов распознавания и его математического аппарата – формальных
грамматик, не входит в задачи этой книги. Для серьезного изучения автору
остается препроводить читателя к [10,11], а самому попытаться изложить суть
приведенных методов распознавания «на пальцах».</p>

<p class=a4><b><a name="m1">Рекурсивные распознаватели арифметических выражений. </b>Некоторые
фрагменты синтаксического распознавания текста можно выполнить, руководствуясь
общими принципами рекурсивного программирования. Так, можно написать
распознаватель (и интерпретатор) арифметических выражений со скобками на
основании рекурсивной функции со следующими «правилами игры»:</p>

<p class=a1>- рекурсивная функция возвращает значение выражения,
представленного текстовой строкой;</p>

<p class=a1>- функция ищет в строке наименее приоритетную операцию <b><a name="m2">вне
скобок, </b>относительно ее она разделяет строку на две части и рекурсивно
вызывает саму себя для полученных частей, над результатами вызовов выполняется
действие, соответствующее найденной операции;</p>

<p class=a1>- если строка содержит только выражение в скобках, то эти скобки
уничтожаются, а по отношению к полученной строке функция вызывается рекурсивно;</p>

<p class=a1>- если строка содержит только константу, то она переводится во
внутреннюю форму и ее значение возвращается в виде результата;</p>

<p class=a1>- если в выражении предусмотрены переменные, то для них необходимо
разработать способ отображения имени переменной в ее адрес (например, создать
таблицу имен).</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0>//------------------------------------------------------<span
lang=EN-US style='mso-ansi-language:EN-US'>7</span>6-01.<span lang=EN-US
style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0>// Калькулятор арифметических выражений со ()</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int calc(char *s){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>inside</span>=0;<span
style='mso-tab-count:5'>                                                      </span>//
уровень вложенности ()</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>char</span> *<span
lang=EN-US style='mso-ansi-language:EN-US'>p</span>1=<span lang=EN-US
style='mso-ansi-language:EN-US'>NULL</span>,*<span lang=EN-US style='mso-ansi-language:
EN-US'>p</span>2=<span lang=EN-US style='mso-ansi-language:EN-US'>NULL</span>;<span
style='mso-tab-count:3'>                                 </span>// указатели на
символы операций + и * вне ()</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for (char
*q=s;*q!=NULL;q++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>switch(*q)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span>{<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>case '*':<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>case '/':<span
style='mso-tab-count:1'> </span>if (inside==0 &amp;&amp; p2==NULL) p2=q; <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:3'>                                    </span>break</span>;<span
style='mso-tab-count:3'>                           </span>// Запоминание первой
* вне ()</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>case '+':<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>case '-':<span
style='mso-tab-count:1'> </span>if (inside==0 &amp;&amp; p1==NULL) p1=q; <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:3'>                                    </span>break</span>;<span
style='mso-tab-count:3'>                           </span>// Запоминание первго
+ вне ()</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>case '(':<span
style='mso-tab-count:1'> </span>inside++; break;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>case ')':<span
style='mso-tab-count:1'> </span>inside--; break;<o:p></o:p></span></p>

<p class=a0>
<span
style='mso-tab-count:2; mso-ansi-language:EN-US' lang="EN-US">                        </span>}</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>if</span> (<span
lang=EN-US style='mso-ansi-language:EN-US'>p</span>1!=<span lang=EN-US
style='mso-ansi-language:EN-US'>NULL</span>) <span lang=EN-US style='mso-ansi-language:
EN-US'>p</span>2=<span lang=EN-US style='mso-ansi-language:EN-US'>p</span>1;<span
style='mso-tab-count:4'>                                          </span>//
Запоминание самой низкоприоритетной </p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>if</span> (<span
lang=EN-US style='mso-ansi-language:EN-US'>p</span>2!=<span lang=EN-US
style='mso-ansi-language:EN-US'>NULL</span>){<span style='mso-tab-count:5'>                                                    </span>//
операции</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>char</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>c</span>=*<span lang=EN-US
style='mso-ansi-language:EN-US'>p</span>2; *<span lang=EN-US style='mso-ansi-language:
EN-US'>p</span>2=0;<span style='mso-tab-count:3'>                                 </span>//
&quot;разрезать&quot; строку на две части</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>switch</span>(<span lang=EN-US
style='mso-ansi-language:EN-US'>c</span>)<span style='mso-tab-count:4'>                                               </span>//
и выполнить операцию над результатом</p>

<p class=a0><span style='mso-tab-count:2'>                        </span><span
lang=EN-US style='mso-ansi-language:EN-US'>{<span style='mso-tab-count:4'>                                               </span>//
для полученных частей<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>case '*':<span
style='mso-tab-count:1'> </span>return calc(s) * calc(p2+1);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>case '/':<span
style='mso-tab-count:1'> </span>return calc(s) / calc(p2+1);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>case '+':<span
style='mso-tab-count:1'>            </span>return calc(s) + calc(p2+1);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>case '-':<span
style='mso-tab-count:1'> </span>return calc(s) - calc(p2+1);<o:p></o:p></span></p>

<p class=a0>
<span
style='mso-tab-count:2; mso-ansi-language:EN-US' lang="EN-US">                        </span>}}</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>if</span> (*<span
lang=EN-US style='mso-ansi-language:EN-US'>s</span>=='(' &amp;&amp; *(<span
lang=EN-US style='mso-ansi-language:EN-US'>q</span>-1)==')'){<span
style='mso-tab-count:3'>                         </span>// выражение в () -
снять () </p>

<p class=a0><span style='mso-tab-count:1'>            </span>*(<span
lang=EN-US style='mso-ansi-language:EN-US'>q</span>-1)=0; <span lang=EN-US
style='mso-ansi-language:EN-US'>return</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>calc</span>(<span lang=EN-US
style='mso-ansi-language:EN-US'>s</span>+1);<span style='mso-tab-count:2'>                       </span>//
и вызвать рекурсивно для выражения в ()</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span lang=EN-US
style='mso-ansi-language:EN-US'>}<span style='mso-tab-count:5'>                                                           </span>//
накопление константы<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for (int
n=0;*s&gt;='0' &amp;&amp; *s&lt;='9';s++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>n=n*10+*s-'0';<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>return</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>n</span>;}<span style='mso-tab-count:
4'>                                               </span>// все остальное
игнорируется<span lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a4><b><a name="m3">Рекурсия в формальных грамматиках. </b>Описание синтаксиса
языков представлено контекстно-свободными формальными грамматиками. Каждой
синтаксической единице соответствует группа правил. В левой части правила
находится <b style='mso-bidi-font-weight:normal'><a name="m4">нетерминальный</b> символ,
обозначающий эту синтаксическую единицу, а в правых частях – варианты ее
представления в виде цепочек, состоящих как из <b style='mso-bidi-font-weight:
normal'><a name="m5">терминальных </b>символов – то есть символов самого распознаваемого
текста, так и из нетерминальных символов, то есть других синтаксических единиц,
включенных в определение данной синтаксической единицы. Правила определяют
такие свойства синтаксиса как вложенность, приоритеты и т.п.. Сущность
синтаксического анализа состоит в построении последовательности вложений правил
одного в другое по принципу: нетерминальный символ левой части правила может
быть замен на одну из своих правых частей. Совокупность таких подстановок,
приводящих в конце концов к исходной распознаваемой цепочке (предложение языка,
состоящее из терминальных символов), образует дерево и является результатом
распознавания.</p>

<p class=a>Общепринятая иллюстрация – грамматика четырех арифметических
действий со скобками:</p>

<p class=a7><span style='mso-ansi-language:RU'><o:p>&nbsp;</o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'>F ::= i | i[E] | c | (E)<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'>T ::= F | T*F<span style='mso-spacerun:yes'>  </span>| T/F <o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'>E ::= T | E+T<span style='mso-spacerun:yes'>  </span>| E-T<o:p></o:p></span></p>

<p class=a6><span style='font-family:"Courier New"'>Z ::= E<o:p></o:p></span></p>

<p class=a4><span style='mso-spacerun:yes'> </span>Первая группа правил
определяет терм – первичную синтаксическую единицу в виде идентификатора <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>i</span>, </b>константы <b style='mso-bidi-font-weight:normal'><a name="m6"><span
lang=EN-US style='mso-ansi-language:EN-US'>c</span>, </b>элемента массива <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>i</span>[<span lang=EN-US
style='mso-ansi-language:EN-US'>E</span>], </b>у которого в скобках может
стоять любое выражение. Здесь также определяется правило изменения приоритета
операций с помощью скобок, которые превращают любое выражение <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>E</span><span lang=EN-US> </span></b>в первичную синтаксическую единицу.</p>

<p class=a4>Вторая и третья группы правил являются прямо рекурсивными и тем
самым определяют способы формирования циклических цепочек произвольной длины
вида <b style='mso-bidi-font-weight:normal'><a name="m7"><span lang=EN-US style='mso-ansi-language:
EN-US'>F</span>*<span lang=EN-US
style='mso-ansi-language:EN-US'>F</span>/</b><b style='mso-bidi-font-weight:
normal'><a name="m8"><span lang=EN-US style='mso-ansi-language:EN-US'>F</span>*</b><b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>F</span><span lang=EN-US> </span></b>и <b style='mso-bidi-font-weight:
normal'><a name="m9"><span lang=EN-US style='mso-ansi-language:EN-US'>T</span>+</b><b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>T</span>-<span lang=EN-US
style='mso-ansi-language:EN-US'>T</span>. </b>Кроме того, вложенность описаний
нетерминальных символов задает приоритеты операций, используемых в цепочках.
Последнее правило определяет <b style='mso-bidi-font-weight:normal'><a name="m10"><span
lang=EN-US style='mso-ansi-language:EN-US'>Z</span> – </b>начальный символ, из
которого выводится любое предложение языка (цепочка символов) и с которого
начинается или заканчивается распознавание. </p>

<p class=a4>Последовательность применения правил подстановки (дерево
синтаксического разбора) для выражения <b style='mso-bidi-font-weight:normal'><a name="m11"><span
lang=EN-US style='mso-ansi-language:EN-US'>i</span>*(</b><b style='mso-bidi-font-weight:
normal'><a name="m12"><span lang=EN-US style='mso-ansi-language:EN-US'>i</span>+</b><b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>i</span>) </b>будет выглядеть так.</p>

<p class=a6><o:p>&nbsp;</o:p></p>

<p class=a6><span
style='mso-spacerun:yes; font-family:Courier New'>       </span><span lang=EN-US
style='font-family:"Courier New";mso-ansi-language:EN-US'>Z<span
style='mso-spacerun:yes'>      </span><o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>       </span>|<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>       </span>E<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>       </span>|<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>       </span>T<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>-----<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>T * F<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>| | ------------ <o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>F | (<span
style='mso-spacerun:yes'>    </span>E<span style='mso-spacerun:yes'>    
</span>)<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>| | | -------<span
style='mso-spacerun:yes'>  </span>|<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>| | | E<span
style='mso-spacerun:yes'>  </span>+<span style='mso-spacerun:yes'> 
</span>T<span style='mso-spacerun:yes'>  </span>|<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>| | | |<span
style='mso-spacerun:yes'>     </span>|<span style='mso-spacerun:yes'>  </span>|<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>| | | T<span
style='mso-spacerun:yes'>  </span>|<span style='mso-spacerun:yes'> 
</span>F<span style='mso-spacerun:yes'>  </span>|<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>| | | |<span
style='mso-spacerun:yes'>  </span>|<span style='mso-spacerun:yes'> 
</span>|<span style='mso-spacerun:yes'>  </span>|<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>| | | F<span
style='mso-spacerun:yes'>  </span>|<span style='mso-spacerun:yes'>  </span><u>i</u><span
style='mso-spacerun:yes'>  </span>|<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>| | | |<span
style='mso-spacerun:yes'>  </span>|<span style='mso-spacerun:yes'> 
</span>|<span style='mso-spacerun:yes'>  </span>|<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='font-family:"Courier New";mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>     </span>i * ( i<span
style='mso-spacerun:yes'>  </span>+<span style='mso-spacerun:yes'> 
</span>i<span style='mso-spacerun:yes'>  </span>)<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a4><b style='mso-bidi-font-weight:normal'><a name="m13">Синтаксический анализ
методом рекурсивного спуска. </b>Рекурсивный спуск является самым «естественным»
алгоритм нисходящего разбора – построения дерева «сверху вниз». При нисходящем
разборе этот каждый нетерминальный символ<span style='mso-spacerun:yes'> 
</span>необходимо заменить на правую часть одного из правил из соответствующей
группы, в котором он присутствует в левой части. Единственным основанием для
такого выбора является начало той части терминальной строки (предложения),
которое «покрывается» этим нетерминальным символом (синтаксической единицей).</p>

<p class=a>Отсюда следует самый простой неформальный алгоритм синтаксического
анализа. Для каждой группы правил с общим нетерминальным символом в левой части
пишется функция распознавания, которая по начальным символам терминальной
цепочки в состоянии определить, правую часть какого правила следует применить.
Затем она параллельно просматривает терминальную цепочку и правую часть
правила. Если очередные терминальные символы в цепочке и в правиле совпадают,
то они оба пропускаются, если нет, то это признак синтаксической ошибки. Если в
правиле встречается нетерминальный символ, то необходимо вызвать аналогичную
функцию для обработки группы правил, в которой этот нетерминал встречается в
левой части. Посмотрим, как эта идея воплотится для распознавания терма <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>F</span>.<o:p></o:p></b></p>

<p class=a4><b style='mso-bidi-font-weight:normal'><a name="m14"><o:p>&nbsp;</o:p></b></p>

<p class=a0>//------------------------------------------------------<span
lang=EN-US style='mso-ansi-language:EN-US'>7</span>6-02.<span lang=EN-US
style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0>//---- Распознаватель правил <span lang=EN-US style='mso-ansi-language:
EN-US'>F</span> ::= <span lang=EN-US style='mso-ansi-language:EN-US'>i</span> |
<span lang=EN-US style='mso-ansi-language:EN-US'>i</span>[<span lang=EN-US
style='mso-ansi-language:EN-US'>E</span>] | <span lang=EN-US style='mso-ansi-language:
EN-US'>c</span> | (<span lang=EN-US style='mso-ansi-language:EN-US'>E</span>)</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>char</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>s</span>[80];<span
style='mso-spacerun:yes'>        </span><span style='mso-tab-count:1'>            </span>//
входная цепочка терминалов</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>int</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>i</span>;<span
style='mso-spacerun:yes'>                 </span><span style='mso-tab-count:
1'>            </span>// текущий терминальный символ</p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>extern</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>void</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>E</span>();<span style='mso-tab-count:
1'> </span>// Объявление используемого распознавателя для <span lang=EN-US
style='mso-ansi-language:EN-US'>E</span></p>

<p class=a0><span style='mso-spacerun:yes'> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>void F() {<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>switch(s[i]){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>case 'c' : i++; printf(&quot;F::=c\n&quot;);
break;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>case 'i' : i++;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span><span
style='mso-spacerun:yes'>   </span>if (s[i]=='['){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:4'>                                                </span>printf(&quot;F::=i[E]\n&quot;);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span><span
style='mso-spacerun:yes'>   </span>i++; E();<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span><span
style='mso-spacerun:yes'>   </span>if (s[i]==']') i++; else error();<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>                        </span><span
style='mso-spacerun:yes'>   </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>else printf(&quot;F::=i\n&quot;);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>break;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>case '(' : i++;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>printf(&quot;F::=(E)\n&quot;);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>E();<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>if (s[i]==')') i++;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>else error();<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span><span style='mso-spacerun:yes'> 
</span>break;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span>default</span>: <span lang=EN-US
style='mso-ansi-language:EN-US'>error</span>();</p>

<p class=a0><span style='mso-tab-count:1'>            </span><span
style='mso-spacerun:yes'>  </span>}}</p>

<p class=a4>Индекс <b style='mso-bidi-font-weight:normal'><a name="m15"><span lang=EN-US
style='mso-ansi-language:EN-US'>i</span></b> является указателем на текущий
нетерминальный символ во входной строке (цепочке). Каждая процедура, анализируя
очередной символ, продвигает этот указатель вперед, если в выбранной правой
части правила находится такой же символ, в противном случае информирует о
синтаксической ошибке. Например, в правой части правила <b style='mso-bidi-font-weight:
normal'><a name="m16"><span lang=EN-US style='mso-ansi-language:EN-US'>F</span>::=</b><b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>i</span>[<span lang=EN-US
style='mso-ansi-language:EN-US'>E</span>]</b> после символа <b
style='mso-bidi-font-weight:normal'>[</b> и нетерминала <b style='mso-bidi-font-weight:
normal'><a name="m17"><span lang=EN-US style='mso-ansi-language:EN-US'>E</span></b> следует
символ <b style='mso-bidi-font-weight:normal'><a name="m18">]</b>. Последний и проверяется
после вызова функции анализа нетерминала <b style='mso-bidi-font-weight:normal'><a name="m19"><span
lang=EN-US style='mso-ansi-language:EN-US'>E</span></b>.<span
style='mso-spacerun:yes'>  </span>Если он действительно присутствует в строке
как текущий символ, то он пропускается.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span style='mso-spacerun:yes'>      </span><span lang=EN-US
style='mso-ansi-language:EN-US'>if (S[i])==’]’) i++; else error();<o:p></o:p></span></p>

<p class=a4><span lang=EN-US style='mso-ansi-language:EN-US'>E</span>сли в
правой части правила имеется нетерминал, то в тот момент, когда в
просматриваемом фрагменте строки «наступает очередь» этого нетерминала,
вызывается функция, которая должна производить этот анализ для группы правил с
этим нетерминалом в левой части. Например, после анализа цепочки терминалов <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>i</span>[</b> выясняется, что речь идет о правиле<span
style='mso-spacerun:yes'>  </span><b style='mso-bidi-font-weight:normal'><a name="m20"><span
lang=EN-US style='mso-ansi-language:EN-US'>F</span>::=</b><b style='mso-bidi-font-weight:
normal'><a name="m21"><span lang=EN-US style='mso-ansi-language:EN-US'>i</span>[</b><b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>E</span>]</b>, тогда для выполнения анализа выражения в скобках
необходимо просто вызвать фунцию распознавания для <b style='mso-bidi-font-weight:
normal'><a name="m22"><span lang=EN-US style='mso-ansi-language:EN-US'>E</span></b>.</p>

<p class=a4>Выбор одной или другой правой части может быть произведен только на
основе анализа одного или нескольких текущих терминальных символов. Так выбор
одного из правил <b style='mso-bidi-font-weight:normal'><a name="m23"><span lang=EN-US
style='mso-ansi-language:EN-US'>F</span>::=</b><b style='mso-bidi-font-weight:
normal'><a name="m24"><span lang=EN-US style='mso-ansi-language:EN-US'>i</span> | </b><b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>i</span>[<span lang=EN-US
style='mso-ansi-language:EN-US'>E</span>]</b> производится по первым двум
символам (одного здесь не достаточно).</p>

<p class=a>Некоторые трудности могут возникнуть при анализе правил, правая
часть которых начинается с нетерминального символа. В этом случае необходимы
содержательные преобразования группы правил. Например, вторая группа правил
генерирует цепочки вида <b style='mso-bidi-font-weight:normal'><a name="m25"><span
lang=EN-US style='mso-ansi-language:EN-US'>F</span> * </b><b style='mso-bidi-font-weight:
normal'><a name="m26"><span lang=EN-US style='mso-ansi-language:EN-US'>F</span> / </b><b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>F</span> * <span lang=EN-US
style='mso-ansi-language:EN-US'>F</span> / </b><b style='mso-bidi-font-weight:
normal'><a name="m27"><span lang=EN-US style='mso-ansi-language:EN-US'>F</span></b> с
переменным количеством нетерминалов <b style='mso-bidi-font-weight:normal'><a name="m28"><span
lang=EN-US style='mso-ansi-language:EN-US'>F</span></b> и знаками операций <b
style='mso-bidi-font-weight:normal'>*, /</b><span style='mso-spacerun:yes'> 
</span>между ними. Очевидно, процедура для нетерминала <b style='mso-bidi-font-weight:
normal'><a name="m29"><span lang=EN-US style='mso-ansi-language:EN-US'>T</span></b> должна
распознавать циклическую последовательность таких символов и завершать
распознавание, когда во входной цепочке ей встретится очередной символ,
отличный от <b style='mso-bidi-font-weight:normal'><a name="m30">* </b><span
style='mso-spacerun:yes'> </span>и <b style='mso-bidi-font-weight:normal'><a name="m31">/ </b>.</p>

<p class=a><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void T() {<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>puts(&quot;T::=F|T*F|T/F&quot;);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>F();
while(s[i]=='*' || s[i]=='/') { i++; F(); }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void E() {<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>puts(&quot;E::=T|E+T|E-T&quot;);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>T();
while(s[i]=='+' || s[i]=='-') { i++; T(); }<o:p></o:p></span></p>

<p class=a0>}</p>

<p class=a>Коль скоро последовательность вызова процедур обработки
нетерминальных символов определяется последовательностью применения
соответствующих правил при построении дерева, а она обычно является
рекурсивной, то в системе процедур имеется скрытая (косвенная) рекурсия.
Поэтому данный метод получил название <b style='mso-bidi-font-weight:normal'><a name="m32">рекурсивного
спуска</b>. </p>

<p class=a4><b style='mso-bidi-font-weight:normal'><a name="m33">Нисходящий разбор с
возвратами. </b>Следующий пример является скорее иллюстративным, нежели
практически значимым. Задача синтаксического анализа решается в нем путем
полного перебора всех возможных правил подстановки. Отметим уже известные нам
принципы организации рекурсивного процесса:</p>

<p class=a1 style='text-indent:0cm;mso-list:l3 level1 lfo35;tab-stops:42.55pt list 53.45pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>-<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span>
<![endif]>рекурсивная
функция при каждом своем вызове получает на вход<span
style='mso-spacerun:yes'>  </span>очередной<span style='mso-spacerun:yes'> 
</span>нетерминал <b style='mso-bidi-font-weight:normal'><a name="m34"><span lang=EN-US
style='mso-ansi-language:EN-US'>sym</span></b> и индекс начала терминальной
цепочки <b style='mso-bidi-font-weight:normal'><a name="m35"><span lang=EN-US
style='mso-ansi-language:EN-US'>s</span></b>, которая должна быть выведена из
него;</p>

<p class=a1 style='text-indent:0cm;mso-list:l34 level1 lfo36;tab-stops:42.55pt list 53.45pt'><![if !supportLists]>
<span
style='mso-list:Ignore; mso-fareast-font-family:Times New Roman CYR; mso-bidi-font-family:Times New Roman CYR'>-<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span>
<![endif]>результатом
работы текущего, а также всех вложенных (внутренних) вызовов является
«покрытие» некоторой<span style='mso-spacerun:yes'>  </span>левой части цепочки
деревом правил, выводимых из данного нетерминала. При этом функция возвращает
индекс символа в строке, следующего за «покрытой» цепочкой. Если вывод
неудачен, то возвращается значение -1. Если при покрытии одновременно достигнут
конец правила и конец строки, это является основанием для прекращения
рекурсивного поиска по принципу «первого подходящего»;</p>

<p class=a1>- рекурсивная функция просматривает набор правил<span
style='mso-spacerun:yes'>  </span>выбирает их них те, которые имеют в левой
части входной нетерминал. Для каждого из них она просматривает его правую
часть. При этом вводится новая переменная <b style='mso-bidi-font-weight:normal'><a name="m36"><span
lang=EN-US style='mso-ansi-language:EN-US'>k</span></b> - индекс «незакрытой»
части цепочки в процессе применения текущего правила;</p>

<p class=a1>- если текущий символ правила является терминальным, то необходимо
сравнить его с текущим «незакрытым» символом во входной строке. Если они
одинаковы, то «закрыть его» - перейти к следующему и в правиле, и в цепочке.
Если нет, отказаться от этого правил и перейти к следующему;</p>

<p class=a1>- для нетерминального символа в правиле нужно выполнить тот же
самый алгоритм - попробовать произвести из него вывод и закрыть часть цепочки.
Это делается рекурсивным вызовом той же функции, но уже для новой «незакрытой»
части цепочки и нового нетерминала. Если полученный результат будет
свидетельствовать об удачном выводе, то следует в текущем правиле также
пропустить «закрытую» данным нетерминалом часть цепочки.<span
style='mso-spacerun:yes'>  </span>Если вывод неудачен - перейти к следующему
правилу;</p>

<p class=a1>- обнаружение конца правила при попытке закрыть им часть цепочки
свидетельствует об удачном его применении. Тогда функция возвращает<span
style='mso-spacerun:yes'>  </span>индекс первого «незакрытого» символа,
оставшегося после применения этого и вложенных в него правил.</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------------------------------------------------------<span
lang=EN-US style='mso-ansi-language:EN-US'>7</span>6-03.<span lang=EN-US
style='mso-ansi-language:EN-US'>cpp</span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>char</span><span
style='mso-tab-count:1'>      </span><span lang=EN-US style='mso-ansi-language:
EN-US'>str</span>[100];<span style='mso-tab-count:2'>                        </span>//
Правила грамматики</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>char<span
style='mso-tab-count:1'>      </span>*GR[]={ &quot;E:TM&quot;,
&quot;M:-E&quot;, &quot;M:+E&quot;, &quot;M:&quot;, &quot;T:FG&quot;,
&quot;G:*T&quot;, &quot;G:/T&quot;, &quot;G:&quot;,<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>&quot;F:c&quot;,
&quot;F:iX&quot;, &quot;X:[E]&quot;,&quot;X:&quot;, &quot;F:(E)&quot;, NULL};<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>isNT</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>char</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>c</span>) {<span style='mso-tab-count:
2'>                        </span>// Является ли заданный символ нетерминальным</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for (int i=0;
GR[i]!=NULL; i++) if (GR[i][0]==c) return i;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return -1; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int Step(char sym,
int s){<span style='mso-tab-count:1'>            </span>// Вывод для
нетерминала sym и <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>i</span>,<span
lang=EN-US style='mso-ansi-language:EN-US'>j</span>,<span lang=EN-US
style='mso-ansi-language:EN-US'>k</span>;<span style='mso-tab-count:4'>                                     </span>//
незакрытой части цепочки <span lang=EN-US style='mso-ansi-language:EN-US'>s</span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for</span> (<span
lang=EN-US style='mso-ansi-language:EN-US'>i</span>=0; <span lang=EN-US
style='mso-ansi-language:EN-US'>GR</span>[<span lang=EN-US style='mso-ansi-language:
EN-US'>i</span>]!=<span lang=EN-US style='mso-ansi-language:EN-US'>NULL</span>;
<span lang=EN-US style='mso-ansi-language:EN-US'>i</span>++)<span
style='mso-tab-count:1'>          </span>// Просмотр всех правил</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>if</span> (<span
lang=EN-US style='mso-ansi-language:EN-US'>GR</span>[<span lang=EN-US
style='mso-ansi-language:EN-US'>i</span>][0]==<span lang=EN-US
style='mso-ansi-language:EN-US'>sym</span>){<span style='mso-tab-count:2'>                     </span>//
Левая часть правила совпадает с <span lang=EN-US style='mso-ansi-language:EN-US'>sym</span></p>

<p class=a0><span style='mso-spacerun:yes'>        </span><span lang=EN-US
style='mso-ansi-language:EN-US'>for</span> (<span lang=EN-US style='mso-ansi-language:
EN-US'>j</span>=2,<span lang=EN-US style='mso-ansi-language:EN-US'>k</span>=<span
lang=EN-US style='mso-ansi-language:EN-US'>s</span>; <span lang=EN-US
style='mso-ansi-language:EN-US'>GR</span>[<span lang=EN-US style='mso-ansi-language:
EN-US'>i</span>][<span lang=EN-US style='mso-ansi-language:EN-US'>j</span>]!=0;
<span lang=EN-US style='mso-ansi-language:EN-US'>j</span>++){ <span
style='mso-tab-count:2'>                     </span>// Посимвольный просмотр
правила</p>

<p class=a0><span style='mso-spacerun:yes'>        </span><span
style='mso-tab-count:2'>                </span><span lang=EN-US
style='mso-ansi-language:EN-US'>if</span> (<span lang=EN-US style='mso-ansi-language:
EN-US'>isNT</span>(<span lang=EN-US style='mso-ansi-language:EN-US'>GR</span>[<span
lang=EN-US style='mso-ansi-language:EN-US'>i</span>][<span lang=EN-US
style='mso-ansi-language:EN-US'>j</span>])==-1){ <span style='mso-tab-count:
2'>                </span>// Нетерминальный символ</p>

<p class=a0><span style='mso-tab-count:3'>                                    </span><span
lang=EN-US style='mso-ansi-language:EN-US'>if</span> (<span lang=EN-US
style='mso-ansi-language:EN-US'>GR</span>[<span lang=EN-US style='mso-ansi-language:
EN-US'>i</span>][<span lang=EN-US style='mso-ansi-language:EN-US'>j</span>]==<span
lang=EN-US style='mso-ansi-language:EN-US'>str</span>[<span lang=EN-US
style='mso-ansi-language:EN-US'>k</span>])<span style='mso-tab-count:1'>          </span>//
совпадает с символом строки </p>

<p class=a0 style='margin-left:72.0pt;text-indent:36.0pt'><span lang=EN-US
style='mso-ansi-language:EN-US'>k</span>++;<span style='mso-tab-count:2'>                 </span>
<span style='mso-tab-count:1'>           </span>// перейти в строке к следующему</p>

<p class=a0 style='margin-left:72.0pt;text-indent:36.0pt'><span lang=EN-US
style='mso-ansi-language:EN-US'>else</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>break</span>;<span style='mso-tab-count:
2'>                    </span>// иначе - неверное правило</p>

<p class=a0><span style='mso-tab-count:3'>                                    </span>}</p>

<p class=a0 style='margin-left:36.0pt;text-indent:36.0pt'><span lang=EN-US
style='mso-ansi-language:EN-US'>else</span> <span style='mso-tab-count:1'>     </span>{<span
style='mso-tab-count:3'>                                   </span>// Нетерминал
- рекурсивный вызов</p>

<p class=a0><span style='mso-spacerun:yes'>       </span><span
style='mso-tab-count:3'>                             </span><span lang=EN-US
style='mso-ansi-language:EN-US'>int l=Step(GR[i][j],k);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>        </span><span style='mso-tab-count:3'>                            </span>if</span>
(<span lang=EN-US style='mso-ansi-language:EN-US'>l</span>==-1) <span
lang=EN-US style='mso-ansi-language:EN-US'>break</span>;<span style='mso-tab-count:
1'>  </span>
<span
style='mso-tab-count:1; mso-ansi-language:EN-US' lang="EN-US">            </span>// Нельзя вывести - неверное
правило</p>

<p class=a0 style='margin-left:72.0pt;text-indent:36.0pt'><span lang=EN-US
style='mso-ansi-language:EN-US'>k</span>=<span lang=EN-US style='mso-ansi-language:
EN-US'>l</span>;<span style='mso-tab-count:3'>                               </span>//
Иначе - пропустить закрытую часть</p>

<p class=a0 style='margin-left:72.0pt;text-indent:36.0pt'><span lang=EN-US
style='mso-ansi-language:EN-US'>printf(&quot;*%s\n&quot;,GR[i]);<o:p></o:p></span></p>

<p class=a0 style='text-indent:36.0pt'>
<span style='mso-tab-count:2; mso-ansi-language:EN-US' lang="EN-US">                        </span>}</p>

<p class=a0 style='margin-left:36.0pt;text-indent:36.0pt'>}</p>

<p class=a0 style='text-indent:36.0pt'>// Разбор правила удалось провести до
конца</p>

<p class=a0 style='text-indent:36.0pt'><span lang=EN-US style='mso-ansi-language:
EN-US'>if (GR[i][j]==0) { printf(&quot;%s__%s\n&quot;,GR[i],&amp;str[k]);<span
style='mso-spacerun:yes'>  </span>return k; }<o:p></o:p></span></p>

<p class=a0 style='text-indent:36.0pt'>} </p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return</span> -1;
}<span style='mso-tab-count:2'>                     </span>// Ни одного правила
не найдено</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>void main(){
printf(&quot;Строка:&quot;); gets(str);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int k=Step('E',0);
if (k!=-1 &amp;&amp; str[k]==0) puts(&quot;O.K.&quot;);}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a4>Естественным ограничением для полного перебора вариантов является
исключение прямой или косвенной левосторонней рекурсии. То есть в грамматике
принципиально недопустимы правила вида которые приводят к «зацикливанию»
алгоритма. Такое правило будет применяется само к себе бесконечное число раз.</p>

<p class=a7><span style='mso-ansi-language:RU'><o:p>&nbsp;</o:p></span></p>

<p class=a6>E ::= E + T<span style='mso-tab-count:1'>        </span>или<span
style='mso-spacerun:yes'>  </span>сочетания правил</p>

<p class=a6><span lang=EN-US style='mso-ansi-language:EN-US'>E ::= X . . .<o:p></o:p></span></p>

<p class=a6><span lang=EN-US style='mso-ansi-language:EN-US'>X ::= E . . .<o:p></o:p></span></p>

<p class=a4>Поэтому грамматика четырех арифметических действий со скобками
должна быть представлена здесь несколько в другом виде (<span lang=EN-US
style='mso-ansi-language:EN-US'>LL</span>(1)-грамматика), содержащем правила с
пустой правой частью.</p>

<p class=a6><o:p>&nbsp;</o:p></p>

<p class=a6>E::= TM</p>

<p class=a6>M::= +E | -E | (пусто)</p>

<p class=a6>T::= FG</p>

<p class=a6>G::= *T | /T | (пусто)</p>

<p class=a6><span lang=EN-US style='mso-ansi-language:EN-US'>F::= c<span
style='mso-spacerun:yes'>  </span>| iX | (E)<o:p></o:p></span></p>

<p class=a6>X::= [E]| (пусто)</p>

<p class=a5><span style='mso-ansi-language:RU'><o:p>&nbsp;</o:p></span></p>

<p class=a0><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
