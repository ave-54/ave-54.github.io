<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=Edit-Time-Data href="021.files/editdata.mso">
<title>2.1. Зачем читать чужие программы ?</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="metricconverter"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>User</o:Author>
  <o:Template>Книга(шаблон).dot</o:Template>
  <o:LastAuthor>www.PHILka.RU</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>161</o:TotalTime>
  <o:Created>2008-05-24T09:38:00Z</o:Created>
  <o:LastSaved>2008-05-24T09:38:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>1538</o:Words>
  <o:Characters>8770</o:Characters>
  <o:Company>NSTU_VT</o:Company>
  <o:Bytes>11776</o:Bytes>
  <o:Lines>73</o:Lines>
  <o:Paragraphs>20</o:Paragraphs>
  <o:CharactersWithSpaces>10288</o:CharactersWithSpaces>
  <o:Version>11.6360</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:AttachedTemplate HRef="U:\Романов\Книга(шаблон).dot"></w:AttachedTemplate>
  <w:DoNotHyphenateCaps/>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
   <w:UseWord97LineBreakingRules/>
   <w:SelectEntireFieldWithStartOrEnd/>
   <w:UseWord2002TableStyleRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:"Times New Roman CYR";
	panose-1:2 2 6 3 5 4 5 2 3 4;
	mso-font-charset:204;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
@font-face
	{font-family:"Arial CYR";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:204;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
h1
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:14.0pt;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h3
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-bidi-font-family:"Times New Roman";
	font-weight:normal;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.a, li.a, div.a
	{mso-style-name:текст;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.0pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a0, li.a0, div.a0
	{mso-style-name:программа;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a1, li.a1, div.a1
	{mso-style-name:список;
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:18.45pt;
	margin-bottom:0cm;
	margin-left:46.2pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-17.85pt;
	mso-pagination:widow-orphan;
	mso-list:l0 level1 lfo1;
	tab-stops:list 21.3pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a2, li.a2, div.a2
	{mso-style-name:определение;
	mso-style-parent:текст;
	margin-top:12.0pt;
	margin-right:32.9pt;
	margin-bottom:12.0pt;
	margin-left:35.45pt;
	text-align:justify;
	text-indent:.55pt;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-alt:solid windowtext 1.5pt;
	padding:0cm;
	mso-padding-alt:1.0pt 1.0pt 1.0pt 1.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a3, li.a3, div.a3
	{mso-style-name:эпиграф;
	margin-top:12.0pt;
	margin-right:32.9pt;
	margin-bottom:12.0pt;
	margin-left:5.0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-style:italic;
	mso-bidi-font-style:normal;}
p.a4, li.a4, div.a4
	{mso-style-name:"от края";
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.a5, li.a5, div.a5
	{mso-style-name:Формула;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	layout-grid-mode:line;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.a6, li.a6, div.a6
	{mso-style-name:"без формата";
	mso-style-parent:программа;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("021.files/header.htm") fs;
	mso-footnote-continuation-separator:url("021.files/header.htm") fcs;
	mso-endnote-separator:url("021.files/header.htm") es;
	mso-endnote-continuation-separator:url("021.files/header.htm") ecs;}
@page Section1
	{size:21.0cm 842.0pt;
	margin:33.45pt 42.55pt 72.0pt 89.85pt;
	mso-header-margin:14.2pt;
	mso-footer-margin:31.75pt;
	mso-header:url("021.files/header.htm") h1;
	mso-even-footer:url("021.files/header.htm") ef1;
	mso-footer:url("021.files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:103034989;
	mso-list-type:hybrid;
	mso-list-template-ids:1917452710 -1485139634 68747267 68747269 68747265 68747267 68747269 68747265 68747267 68747269;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-style-link:список;
	mso-level-text:\F0B7;
	mso-level-tab-stop:71.45pt;
	mso-level-number-position:left;
	margin-left:71.45pt;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:129174666;
	mso-list-type:hybrid;
	mso-list-template-ids:-1591059886 1579949536 68747267 68747269 68747265 68747267 68747269 68747265 68747267 68747269;}
@list l1:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:53.45pt;
	mso-level-number-position:left;
	margin-left:53.45pt;
	text-indent:-18.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Обычная таблица";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=RU style='tab-interval:36.0pt' background="back.gif">

<div class=Section1>

<h2>2.1. Зачем читать чужие программы ?<span lang=EN-US style='mso-ansi-language:
EN-US'><o:p></o:p></span></h2>

<h3>Прежде чем начать (Чего не могут компьютеры ?)</h3>

<p class=a3 align=right style='margin-top:0cm;margin-right:16.4pt;margin-bottom:
0cm;margin-left:5.0cm;margin-bottom:.0001pt;text-align:right'>«Разруха сидит не
в клозетах, а в головах»</p>

<p class=a3 align=right style='margin-top:0cm;margin-right:16.4pt;margin-bottom:
0cm;margin-left:5.0cm;margin-bottom:.0001pt;text-align:right'><b
style='mso-bidi-font-weight:normal'>М.Булгаков «Собачье сердце».<o:p></o:p></b></p>

<p class=a>Тот, кто считает, что процесс программирования заключается во вводе
в компьютер различных команд и выражений, написанных на языке программирования,
глубоко ошибается. Программа, на самом деле, пишется в голове и переносится по
частям в компьютер, поскольку голова не является самым удобным инструментом для
ее выполнения.</p>

<p class=a>Здесь я хотел бы сразу же снять некоторые заблуждения, которые
возникают у начинающих<span style='font-family:"Times New Roman"'>:</span></p>

<p class=a1 style='margin-left:35.45pt;text-indent:-14.15pt'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>компьютер - это инструмент программирования,
никакие достоинства инструмента не заменят навыков работы с ним. И уж тем более
нельзя объяснять низкое качество производимого продукта только несовершенством инструмента;
</p>

<p class=a1 style='margin-left:35.45pt;text-indent:-14.15pt'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>компьютер никогда не будет «думать за вас». Если
вы работаете с готовой программой, тогда может сложиться такая иллюзия. Если же
вы разрабатываете свою, следить за ее работой должны именно вы. То есть ее
нужно параллельно с компьютером «прокручивать» в собственной голове. Процесс
отладки в том и состоит, что вы сами отслеживаете разницу между работой той
идеальной программы, которая пока находится у вас в голове, и той реальной,
имеющей ошибки, которая в данный момент «крутится» в компьютере;</p>

<p class=a1 style='margin-left:35.45pt;text-indent:-14.15pt'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>в любом виде деятельности имеется своя
технология - это совокупность знаний, навыков, инструментов, правил работы. В
программировании также есть своя технология. Ее нужно изучить и приспособить
под свой образ мышления.</p>

<p class=a>Программирование тем и отличается от всех других видов деятельности,
что представляет собой в концентрированном виде формально-логический образ
мышления. Как известно, человек воспринимает мир «двумя полушариями» -
образно-эмоционально и формально-логически. Компьютер<span
style='mso-spacerun:yes'>  </span>содержит<span style='mso-spacerun:yes'> 
</span>в себе вторую крайность - он в состоянии воспроизвести с большой
скоростью заданный набор формально-логических действий, именуемых иначе
программой. В принципе, человек может делать то же самое, но в ограниченных
масштабах. Как было метко сказано: «<b style='mso-bidi-font-weight:normal'><a name="m1">Компьютер
- это идиот, но идиот быстродействующий</b>».</p>

<p class=a>Любой набор формальных действий всегда дает определенный результат,
который уже является внешней стороной процесса. Какой-либо «смысл» для самой
формальной системы (программы) этот результат не имеет. То есть компьютер в принципе
не ведает, что творит. Программист же, в отличие от компьютера, должен знать,
что он делает. Он отталкивается от цели, результата, для которых он старается
создать соответствующую им программу, используя всю мощь своего разума и
интеллекта. А здесь нельзя обойтись без образного мышления, интуиции и, если
хотите, вдохновения. </p>

<p class=a>В своей работе программист руководствуется образным представлением
программы, он видит ее «целиком» в процессе выполнения и лишь затем разделяет
ее на отдельные элементы, которые являются в дальнейшем частями алгоритмов и
структур данных. В этом его коренное отличие от компьютера, который не в
состоянии сам писать программы. </p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<h3>Чтение – вот лучшее учение</h3>

<p class=a3 align=right style='margin-top:0cm;margin-right:16.4pt;margin-bottom:
0cm;margin-left:5.0cm;margin-bottom:.0001pt;text-align:right'><span
style='mso-spacerun:yes'> </span>«Не нужно читать много книг» </p>

<p class=a3 align=right style='margin-top:0cm;margin-right:16.4pt;margin-bottom:
0cm;margin-left:5.0cm;margin-bottom:.0001pt;text-align:right'><b
style='mso-bidi-font-weight:normal'>Мао Дзе Дун. Речь 13 октября <st1:metricconverter
ProductID="1957 г" w:st="on">1957 г</st1:metricconverter>. <o:p></o:p></b></p>

<p class=a3 align=right style='margin-top:0cm;margin-right:16.4pt;margin-bottom:
0cm;margin-left:5.0cm;margin-bottom:.0001pt;text-align:right'><b
style='mso-bidi-font-weight:normal'>на Верховном государственном совещании<o:p></o:p></b></p>

<p class=a3 align=right style='margin-top:0cm;margin-right:32.9pt;margin-bottom:
0cm;margin-left:5.0cm;margin-bottom:.0001pt;text-align:right'><o:p>&nbsp;</o:p></p>

<p class=a>Мое глубокое убеждение, изучение программирования нужно начинать с
чтения чужих программ. Риторический вопрос, зачем. Естественно, не для того,
чтобы показать, какие это умные люди – другие программисты. И, естественно, не
какие-то произвольные программы, а нарочно для этого подобранные.</p>

<p class=a>Обычный разговорный язык не так богат, как кажется. То же самое
касается программ. Довольно большой процент программы составляют «стандартные
фразы», а многообразие программ на самом деле заключается в их комбинировании.
Действительно оригинальные алгоритмы в практике обычного программиста
встречаются довольно редко. Обычно он занят рутиной – конструированием
тривиальных алгоритмов из стандартных заготовок.</p>

<p class=a>Но к процессу самого проектирования обратимся позднее. Пока
предстоит освоить «джентльменский набор» фрагментов программ. Тут необходимо
сделать два замечания. Во-первых, в отличие от обычного текста, синтаксические
фрагменты программы не только следуют друг за другом, но и <b style='mso-bidi-font-weight:
normal'><a name="m2">вкладываются </b>друг в друга. Поэтому «хвост» фрагмента может отстоять
от «головы» на достаточно большом расстоянии. Во-вторых, определяющим является
некоторый логический каркас фрагмента, а составные его части могут быть
произвольны. Например, поиск максимального значения элемента по- разному
выглядит таких структурах данных, как массив, массив указателей, список и
дерево, но имеет неизменную, <b style='mso-bidi-font-weight:normal'><a name="m3">инвариантную</b>
ко всем структурам данных часть.</p>

<p class=a><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int<span
style='mso-tab-count:1'>         </span>F(int A[],int n){<span
style='mso-tab-count:3'>                           </span>// </span>Массив<span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int i,s;<span
style='mso-tab-count:4'>                                       </span><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for (i=0,s=A[0];
i&lt;n; i++) <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if <b><a name="m4">(A[i]&lt;s) s=A[i]</b>;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return s; }<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int<span
style='mso-tab-count:1'>         </span>F(int *A[]){<span style='mso-tab-count:
3'>                                 </span>// </span>Массив<span
style='mso-ansi-language:EN-US'> </span>указателей<span lang=EN-US
style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int i,k;<span
style='mso-tab-count:4'>                                       </span><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for (i=k=0;
A[i]!=NULL; i++) <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if <b><a name="m5">(*A[i] &lt; *A[k]) k=i</b>;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return *A[k];}<o:p></o:p></span></p>

<p class=a0><b style='mso-bidi-font-weight:normal'><a name="m6"><span lang=EN-US
style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></b></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int F(list *ph){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>list *p,*q;<span
style='mso-tab-count:4'>                                               </span>//
</span>Список<span lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for (p=q=ph;
p!=NULL; p=p-&gt;next)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if <b><a name="m7">(p-&gt;val &lt; q-&gt;val) p=q</b>;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>return q-&gt;val);
}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int F(xxx *q){<span
style='mso-tab-count:4'>                                         </span>// </span>Дерево<span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int i,n,m;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>if (q==NULL)
return 0;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for
(n=q-&gt;v,i=0; i&lt;4; i++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>            </span>if <b><a name="m8">((m=F(q-&gt;p[i])) &gt;n) n=m</b>;<o:p></o:p></span></p>

<p class=a0>return n;}</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a4>Из сравнения программ видно, что в них имеется сходные конструкции,
заключающиеся в условном присваивании в теле цикла, вид которых не зависит ни
от структуры данных, ни от того, находится минимум в виде самого значения,
указателя на него или его индекса. Неважно также, каким образом просматривается
последовательность элементов. Если оставить только общие части, то получится
даже не конструкция языка, а некоторая логическая схема:</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>for</span> (<span
lang=EN-US style='mso-ansi-language:EN-US'>s</span>=«первый объект»,«цикл по
множеству объектов») </p>

<p class=a0 style='text-indent:36.0pt'><span lang=EN-US style='mso-ansi-language:
EN-US'>if</span> («очередное» &lt; <span lang=EN-US style='mso-ansi-language:
EN-US'>s</span>) <span lang=EN-US style='mso-ansi-language:EN-US'>s</span>=«очередное»;</p>

<p class=a0><b style='mso-bidi-font-weight:normal'><a name="m9"><o:p>&nbsp;</o:p></b></p>

<p class=a4>Эта схема имеет двоякое значение. Во-первых, в каких бы контекстах
она не встречалась, она дает один и тот же результат. Во-вторых, она определяет
<b style='mso-bidi-font-weight:normal'><a name="m10">смысл </b>переменной <b
style='mso-bidi-font-weight:normal'><span lang=EN-US style='mso-ansi-language:
EN-US'>s</span>. </b></p>

<p class=a>Кроме того, есть еще некоторое количество логических конструкций
программы, понимание которых требует обращения не столько к логике, сколько к
здравому смыслу. Убедительность и доказательность их состоит в их очевидности.
А очевидность заключается в том, что им можно найти аналогии в обычном
«физическом» мире, например, в виде перемещений, сдвигов и других
взаимосвязанных движений объектов в пространстве.</p>

<p class=a>Таким образом, умение читать программы – это не просто повторение
того, что написано на языке программирования при помощи других слов. Это даже
не интерпретация, то есть не последовательное выполнение операторов программы в
голове или на бумаге. Чтение<span style='mso-spacerun:yes'>  </span>программы -
это умение «видеть» знакомые фрагменты, выделять их, и уже затем воссоздавать
результат ее работы путем логического соединения в единое целое. Полезность
этого занятия еще и в том, что проектирование программы представляет собой
почти обратный процесс: в образном представлении процесса, ведущего к заданному
результату, нужно «увидеть» составные фрагменты, а затем «выстроить» их в
нужном порядке.</p>

<p class=a>Процесс<span style='mso-spacerun:yes'>  </span>чтения и понимания
программы (также, кстати, как и процессы ее написания и трансляции) не является
линейным. Научно выражаясь, он представляет собой <b style='mso-bidi-font-weight:
normal'><a name="m11">диалектическое единство анализа и синтеза:<o:p></o:p></b></p>

<p class=a1 style='margin-left:1.0cm;tab-stops:list 1.0cm'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>разложение программы на стандартные фрагменты,
формулировка смысла каждого из них, а также смысла переменных;</p>

<p class=a1 style='margin-left:1.0cm;tab-stops:list 1.0cm'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>соединение полученных частей в единое целое и
формулировка результата. Вот здесь, для понимания сущности взаимодействия
фрагментов друг с другом можно интерпретировать (выполнять, прокручивать) части
программы в голове, на бумаге или в отладчике. Это позволяет увидеть <b
style='mso-bidi-font-weight:normal'>вторичный</b> смысл программы, который в
явном виде не присутствует<span style='mso-spacerun:yes'>  </span>в ее тексте.</p>

<p class=a4>Для более-менее свободного общения на любом языке программирования
необходимо знание некоторого минимума «расхожих фраз» - общеупотребительных
программных контекстов.</p>

<p class=a4>
<img border="0" src="Images/yan-in.jpg" width="34" height="31" align="left">Наличие
«джентльменского набора расхожих фраз», находящихся выше конструкций языка
программирования, показывает, что языки программирования на самом деле не
совсем удобны для программирования как такового. На практике программисты
многократно дублируют одни и те же алгоритмы в разных структурах данных, языках
программирования, а для одного языка – в разных системах программирования (см.
приведенный выше пример поиска минимума). А на более общем уровне – проецируют
одни и те же идеи (алгоритмы) в различные модели и формы представления данных.
И если в рамках одной системы программирования для разных структур данных
предпринимаются попытки унификации (например, библиотека шаблонов <span
lang=EN-US style='mso-ansi-language:EN-US'>STL</span>), то в более широком
контексте это не делается. Приведем ряд примеров такой «избыточности» или
«повторяемости» в программировании:</p>

<p class=a1 style='margin-left:1.0cm;tab-stops:list 1.0cm'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>система динамического распределения памяти, в
принципе, одинакова для ядра операционной системы и для приложений (вплоть до
совместно используемого программного кода на Си), но каждая реализована в своем
адресном пространстве, и, возможно, имеет специфику на архитектурном
(машинно-зависимом) уровне, учитывающую особенности систем адресации в
различных режимах работы процессора;</p>

<p class=a1 style='margin-left:1.0cm;tab-stops:list 1.0cm'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>структура данных – односвязный список, может
быть реализована в памяти с использованием структурированных типов, содержащих
указатели. Аналогичный список в двоичном файле поддерживается через функции
ввода-вывода, при помощи которых понятие «указатель» интерпретируется в
двоичном файле на основе обычной целой переменной типа <span lang=EN-US
style='mso-ansi-language:EN-US'>long</span>. Такая система аналогий позволяет
спроецировать программы из одной системы представления данных в другую;</p>

<p class=a1 style='margin-left:1.0cm;tab-stops:list 1.0cm'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>дерево с двумя потомками моделируется в массиве
путем вычисления индексов двух потомков в виде <b><a name="m12">2<span lang=EN-US
style='mso-ansi-language:EN-US'>n</span><span lang=EN-US> </span></b>и <b><a name="m13">2<span
lang=EN-US style='mso-ansi-language:EN-US'>n</span>+1. </b>Это позволяет
спроецировать алгоритмы, работающие с деревьями на обычные массивы
(пирамидальная сортировка);</p>

<p class=a1 style='margin-left:1.0cm;tab-stops:list 1.0cm'><![if !supportLists]>
<span style='mso-list:Ignore; font-family:Symbol; mso-fareast-font-family:Symbol; mso-bidi-font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>такие объекты, как таблица реляционной базы
данных и динамический массив структур в памяти, являются аналогичными, к ним
применимы практически одни и те же алгоритмы упорядочения и поиска данных.
Фактически это проекции одного и того же понятия в разные программные среды
(ограниченные, неэффективно организованные, не сохраняемые данные в оперативной
памяти, и аналогичная более развитая система представлений – для внешней (файловой)).</p>

<p class=a>Отсюда и содержание «джентльменского набора»: это технологические
решения и приемы, а также алгоритмы наиболее употребительных действий над
множествами объектов, независимо от их природы (сумма, количество, минимум,
первый из… и т.п.), которые используются в массовом рутинном программировании
(откуда такое берется – сказано было выше) на том уровне представлений, какой
дают современные языки программирования.</p>

<p class=a><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
